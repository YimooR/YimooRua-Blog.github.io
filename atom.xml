<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YimooRua</title>
  
  <subtitle>啦啦啦啦啦</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-11-20T08:45:15.538Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>YimooRua</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/posts/4a17b156.html"/>
    <id>http://example.com/posts/4a17b156.html</id>
    <published>2022-11-20T08:04:57.742Z</published>
    <updated>2022-11-20T08:45:15.538Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Mybatis学习笔记</title>
    <link href="http://example.com/posts/7fd48667.html"/>
    <id>http://example.com/posts/7fd48667.html</id>
    <published>2022-11-17T09:00:00.000Z</published>
    <updated>2022-11-18T05:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="尚硅谷版Mybatis学习笔记"><a href="#尚硅谷版Mybatis学习笔记" class="headerlink" title="尚硅谷版Mybatis学习笔记"></a>尚硅谷版Mybatis学习笔记</h1><h2 id="一、Mybatis介绍"><a href="#一、Mybatis介绍" class="headerlink" title="一、Mybatis介绍"></a>一、Mybatis介绍</h2><h3 id="什么是Mybatis"><a href="#什么是Mybatis" class="headerlink" title="什么是Mybatis"></a>什么是Mybatis</h3><p>答：1、Mybatis是一个半ORM（对象关系映射）框架，它内部封装了JDBC，开发时只需要关注SQL语句本身，不需要花费精力去处理加载驱动、创建连接、创建statement等繁杂的过程。程序员直接编写原生态sql，可以严格控制sql执行性能，灵活度高。</p><p>2、MyBatis可以使用XML或注解来配置和映射原生信息，将POJO映射成数据库中的记录，避免了几乎所有的JDBC代码和手动设置参数以及获取结果集。</p><p>3、通过xml文件或注解的方式将要执行的各种statement配置起来，并通过java对象和statement中sql的动态参数进行映射生成最终执行的sql语句，最后由mybatis框架执行sql并将结果映射为java对象并返回。（从执行sql到返回result的过程）。</p><h3 id="Mybatis与Hibernate的区别"><a href="#Mybatis与Hibernate的区别" class="headerlink" title="Mybatis与Hibernate的区别"></a>Mybatis与Hibernate的区别</h3><p>答：1、Mybatis和hibernate不同，它不完全是一个ORM框架，因为MyBatis需要程序员自己编写Sql语句。</p><p>2、Mybatis直接编写原生态sql，可以严格控制sql执行性能，灵活度高，非常适合对关系数据模型要求不高的软件开发，因为这类软件需求变化频繁，一但需求变化要求迅速输出成果。但是灵活的前提是mybatis无法做到数据库无关性，如果需要实现支持多种数据库的软件，则需要自定义多套sql映射文件，工作量大。</p><p>3、Hibernate对象&#x2F;关系映射能力强，数据库无关性好，对于关系模型要求高的软件，如果用hibernate开发可以节省很多代码，提高效率。</p><h3 id="为什么使用Mybatis"><a href="#为什么使用Mybatis" class="headerlink" title="为什么使用Mybatis"></a>为什么使用Mybatis</h3><p>答：1、基于SQL语句编程，相当灵活，不会对应用程序或者数据库的现有设计造成任何影响，SQL写在XML里，解除sql与程序代码的耦合，便于统一管理；提供XML标签，支持编写动态SQL语句，并可重用。</p><p>2、与JDBC相比，减少了50%以上的代码量，消除了JDBC大量冗余的代码，不需要手动开关连接；</p><p>3、很好的与各种数据库兼容（因为 MyBatis 使用 JDBC 来连接数据库，所以只要JDBC支持的数据库MyBatis都支持）。</p><p>4、能够与Spring很好的集成；</p><p>5、提供映射标签，支持对象与数据库的ORM字段关系映射；提供对象关系映射标签，支持对象关系组件维护。</p><h3 id="Mybatis下载地址"><a href="#Mybatis下载地址" class="headerlink" title="Mybatis下载地址"></a>Mybatis下载地址</h3><p>URL:Https:&#x2F;&#x2F;github.com&#x2F;mybatis&#x2F;mybatis-3</p><h2 id="二、Mybatis测试使用"><a href="#二、Mybatis测试使用" class="headerlink" title="二、Mybatis测试使用"></a>二、Mybatis测试使用</h2><h3 id="按官方文档简单使用Mybatis流程"><a href="#按官方文档简单使用Mybatis流程" class="headerlink" title="按官方文档简单使用Mybatis流程"></a>按官方文档简单使用Mybatis流程</h3><p>1.导入jar包：mybatis-3.4.1.jar &amp; mysql-connector-java.jar &amp; log4j.jar</p><p>2.创建与数据表字段名对应的实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Goods</span> &#123;</span><br><span class="line"><span class="keyword">private</span> Integer goodsId;</span><br><span class="line"><span class="keyword">private</span> String title;</span><br><span class="line"><span class="keyword">private</span> String subTitle;</span><br><span class="line"><span class="keyword">private</span> Float originalCost;</span><br><span class="line"><span class="keyword">private</span> Float currentPrice;</span><br><span class="line"><span class="keyword">private</span> Float discount;</span><br><span class="line"><span class="keyword">private</span> Integer isFreeDelivery;</span><br><span class="line"><span class="keyword">private</span> Integer categoryId;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.创建全局配置文件Mybatis-Config.xml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;environments default=&quot;development&quot;&gt;</span><br><span class="line">        &lt;environment id=&quot;development&quot;&gt;</span><br><span class="line">            &lt;transactionManager type=&quot;JDBC&quot;/&gt;</span><br><span class="line">            &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/babytun?useUnicode=true&amp;amp;characterEncoding=utf-8&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;password&quot; value=&quot;1234567890&quot;/&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;!-- 将我们写好的sql映射文件（GoodsMapper.xml）一定要注册到全局配置文件（Mybatis-Config.xml）中 --&gt;</span><br><span class="line">        &lt;mapper resource=&quot;Mapper/GoodsMapper.xml&quot;/&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p>4.创建Mapper映射文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.imooc.POJO.GoodsMapper&quot;&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">     接口式编程：</span><br><span class="line">     namespace:名称空间;指定为接口的全类名</span><br><span class="line">     id：唯一标识</span><br><span class="line">     resultType：返回值类型</span><br><span class="line">     #&#123;id&#125;：从传递过来的参数中取出id值</span><br><span class="line">--&gt;</span><br><span class="line">    &lt;select id=&quot;selectGoods&quot; resultType=&quot;com.imooc.POJO.Goods&quot;&gt;</span><br><span class="line">        select goods_id goodsId,title title,sub_title subTitle,original_cost originalCost,current_price currentPrice,discount discount,is_free_delivery isFreeDelivery,category_id categoryId</span><br><span class="line">        from t_goods</span><br><span class="line">        where goods_id = #&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><p>4.创建测试类（1.Mapper命名空间+id值；2.接口式编程（推荐））</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、接口式编程</span></span><br><span class="line"><span class="comment"> *     原生：       Dao       ====&gt;  DaoImpl</span></span><br><span class="line"><span class="comment"> *     mybatis：   Mapper ====&gt;  xxMapper.xml</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 2、SqlSession代表和数据库的一次会话；用完必须关闭；</span></span><br><span class="line"><span class="comment"> * 3、SqlSession和connection一样她都是非线程安全。每次使用都应该去获取新的对象。</span></span><br><span class="line"><span class="comment"> * 4、mapper接口没有实现类，但是mybatis会为这个接口生成一个代理对象。</span></span><br><span class="line"><span class="comment"> *        （将接口和xml进行绑定）</span></span><br><span class="line"><span class="comment"> *        EmployeeMapper empMapper = sqlSession.getMapper(EmployeeMapper.class);</span></span><br><span class="line"><span class="comment"> * 5、两个重要的配置文件：</span></span><br><span class="line"><span class="comment"> *        mybatis的全局配置文件：包含数据库连接池信息，事务管理器信息等...系统运行环境信息</span></span><br><span class="line"><span class="comment"> *        sql映射文件：保存了每一个sql语句的映射信息：</span></span><br><span class="line"><span class="comment"> *                 将sql抽取出来。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Yimoo</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">mybatisTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactory <span class="title function_">getSqlSessionFactory</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        String resource=<span class="string">&quot;Mybatis-Config.xml&quot;</span>;</span><br><span class="line">        InputStream inputStream=Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1、根据xml配置文件（全局配置文件）创建一个SqlSessionFactory对象 有数据源一些运行环境信息</span></span><br><span class="line"><span class="comment">     * 2、sql映射文件；配置了每一个sql，以及sql的封装规则等。</span></span><br><span class="line"><span class="comment">     * 3、将sql映射文件注册在全局配置文件中</span></span><br><span class="line"><span class="comment">     * 4、写代码：</span></span><br><span class="line"><span class="comment">     *        1）、根据全局配置文件得到SqlSessionFactory；</span></span><br><span class="line"><span class="comment">     *        2）、使用sqlSession工厂，获取到sqlSession对象使用他来执行增删改查</span></span><br><span class="line"><span class="comment">     *           一个sqlSession就是代表和数据库的一次会话，用完关闭</span></span><br><span class="line"><span class="comment">     *        3）、使用sql的唯一标志来告诉MyBatis执行哪个sql。sql都是保存在sql映射文件中的。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">demo1</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 2、获取sqlSession实例，能直接执行已经映射的sql语句</span></span><br><span class="line">        <span class="comment">// sql的唯一标识：statement Unique identifier matching the statement to use.</span></span><br><span class="line">        <span class="comment">// 执行sql要用的参数：parameter A parameter object to pass to the statement.</span></span><br><span class="line">        SqlSessionFactory sqlSessionFactory=getSqlSessionFactory();</span><br><span class="line">        SqlSession sqlSession=sqlSessionFactory.openSession();</span><br><span class="line">         <span class="keyword">try</span>&#123;</span><br><span class="line">             Goods goods=sqlSession.selectOne(<span class="string">&quot;com.imooc.POJO.GoodsMapper.selectGoods&quot;</span>,<span class="number">800</span>);</span><br><span class="line">             System.out.println(goods);</span><br><span class="line">         &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">             sqlSession.close();</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">demo2</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        SqlSessionFactory sqlSessionFactory=getSqlSessionFactory();</span><br><span class="line">        SqlSession sqlSession=sqlSessionFactory.openSession();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 3、获取接口的实现类对象</span></span><br><span class="line">            <span class="comment">//会为接口自动的创建一个代理对象，代理对象去执行增删改查方法</span></span><br><span class="line">            GoodsMapper goodsMapper=sqlSession.getMapper(GoodsMapper.class);</span><br><span class="line">            Goods goods=goodsMapper.selectGoods(<span class="number">900</span>);</span><br><span class="line">            System.out.println(goods);</span><br><span class="line">          <span class="comment">//输出：Goods&#123;goodsId=900, title=&#x27;三星 2016版 Galaxy On7（G6100）全网通4G 3GB+32G 钛岩黑 手机&#x27;,          subTitle=&#x27;美囤自营，品质保证！5.5英寸屏，3GB+32GB，双账户应用工作生活两不误！&#x27;, originalCost=1799.0, currentPrice=1299.0, discount=0.722068, isFreeDelivery=1, categoryId=30&#125;</span></span><br><span class="line">            <span class="comment">//自动创建代理</span></span><br><span class="line">            System.out.println(goodsMapper.getClass());<span class="comment">//输出：class com.sun.proxy.$Proxy6</span></span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            sqlSession.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如何让实体类的属性名与数据库字段名一一对应"><a href="#如何让实体类的属性名与数据库字段名一一对应" class="headerlink" title="如何让实体类的属性名与数据库字段名一一对应"></a>如何让实体类的属性名与数据库字段名一一对应</h3><p>1.在mapper文件中sql语句处为字段名设置别名，别名为实体类的属性名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;selectGoods&quot;</span> resultType=<span class="string">&quot;com.imooc.POJO.Goods&quot;</span>&gt;</span><br><span class="line">    select goods_id goodsId,title title,sub_title subTitle,original_cost originalCost,current_price currentPrice,discount discount,is_free_delivery isFreeDelivery,category_id categoryId</span><br><span class="line">    from t_goods</span><br><span class="line">    <span class="type">where</span> <span class="variable">goods_id</span> <span class="operator">=</span> #&#123;id&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>2.在全局配置文件中配置mapUndertocamleCase&#x3D;true，前提是必须属性名与字段名为驼峰命名关系</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderScoretoCamleCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三、全局配置文件的标签"><a href="#三、全局配置文件的标签" class="headerlink" title="三、全局配置文件的标签"></a>三、全局配置文件的标签</h2><p>configuration <a href="/Users/yimoorua/Downloads/mybatis-3.5.9/mybatis-3.5.9.pdf">mybatis-3.5.9.pdf官方文档</a> </p><p>• properties<br>• settings<br>• typeAliases<br>• typeHandlers<br>• objectFactory（了解）<br>• plugins<br>• environments<br>      • environment<br>           • transactionManager<br>               • dataSource<br>               • databaseIdProvider<br>• mappers</p><h3 id="properties属性（属性文件）"><a href="#properties属性（属性文件）" class="headerlink" title="properties属性（属性文件）"></a>properties属性（属性文件）</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">1、mybatis可以使用properties来引入外部properties配置文件的内容；</span></span><br><span class="line"><span class="comment">resource：引入类路径下的资源</span></span><br><span class="line"><span class="comment">url：引入网络路径或者磁盘路径下的资源</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;dbconfig.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>dbconfig.properties文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://localhost:3306/babytun?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=1234567890</span><br><span class="line"></span><br><span class="line">orcl.driver=oracle.jdbc.OracleDriver</span><br><span class="line">orcl.url=jdbc:oracle:thin:@localhost:1521:orcl</span><br><span class="line">orcl.username=scott</span><br><span class="line">orcl.password=123456</span><br></pre></td></tr></table></figure><p>修改environment标签下的properties的value值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="settings设置（自动开启驼峰命名规则）"><a href="#settings设置（自动开启驼峰命名规则）" class="headerlink" title="settings设置（自动开启驼峰命名规则）"></a>settings设置（自动开启驼峰命名规则）</h3><p>这是Mybatis中极为重要的调整设置，它们会改变Mybatis的运行时行为</p><p>mapUnderscoreToCamelCase：是否开启自动驼峰命名规则映射，即从经典数据库列名A_COLUMN到经典Java属性名aColumn的类似映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="typeAliases别名处理器（java类型起别名）"><a href="#typeAliases别名处理器（java类型起别名）" class="headerlink" title="typeAliases别名处理器（java类型起别名）"></a>typeAliases别名处理器（java类型起别名）</h3><p>类型别名是为Java类型设置一个短的名字，方便我们引用某个类</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.imooc.POJO.Goods&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;goods&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>类很多的情况下，可以批量设置这个包下的每一个类创建一个默认的别名，就是简单类名小写。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        别名不区分大小写--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.imooc.POJO&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以使用注解@Alias注解为其指定一个别名（注意只有使用批量起别名时，才可以使用注解起别名）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        别名不区分大小写--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.imooc.POJO&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Alias(&quot;goods&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Goods</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MyBatis已经为许多常见的 Java 类型内建了相应的类型别名。它们都是大小写不敏感的，我们在起别名的时候千万不要占用已有的别名</p><table><thead><tr><th align="center">别名</th><th align="center">映射的类型</th><th align="center">别名</th><th align="center">映射的类型</th><th align="center">别名</th><th align="center">映射的类型</th></tr></thead><tbody><tr><td align="center">_byte</td><td align="center">byte</td><td align="center">string</td><td align="center">String</td><td align="center">date</td><td align="center">Date</td></tr><tr><td align="center">_long</td><td align="center">long</td><td align="center">byte</td><td align="center">Byte</td><td align="center">decimal</td><td align="center">BigDecimal</td></tr><tr><td align="center">_short</td><td align="center">short</td><td align="center">long</td><td align="center">Long</td><td align="center">bigdecimal</td><td align="center">BigDecimal</td></tr><tr><td align="center">_int</td><td align="center">int</td><td align="center">short</td><td align="center">Short</td><td align="center">object</td><td align="center">Object</td></tr><tr><td align="center">_integer</td><td align="center">int</td><td align="center">int</td><td align="center">Integer</td><td align="center">map</td><td align="center">Map</td></tr><tr><td align="center">_double</td><td align="center">double</td><td align="center">double</td><td align="center">Double</td><td align="center">hashmap</td><td align="center">HashMap</td></tr><tr><td align="center">_float</td><td align="center">float</td><td align="center">float</td><td align="center">Float</td><td align="center">list</td><td align="center">List</td></tr><tr><td align="center">_boolean</td><td align="center">boolean</td><td align="center">boolean</td><td align="center">Boolean</td><td align="center">arraylist</td><td align="center">ArrayList</td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">collection</td><td align="center">Collection</td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">iterator</td><td align="center">Iterator</td></tr></tbody></table><h3 id="typeHandlers类型处理器"><a href="#typeHandlers类型处理器" class="headerlink" title="typeHandlers类型处理器"></a>typeHandlers类型处理器</h3><p>无论是 MyBatis 在预处理语句（PreparedStatement）中设置一个参数时，还是从结果集中取出一个值时， 都会用类型处理器将获取的值以合适的方式转换成 Java 类型。</p><table><thead><tr><th>类型处理器</th><th>Java 类型</th><th>JDBC 类型</th></tr></thead><tbody><tr><td>BooleanTypeHandler</td><td>java.lang.Boolean, boolean</td><td>数据库兼容的 BOOLEAN</td></tr><tr><td>ByteTypeHandler</td><td>java.lang.Byte, byte</td><td>数据库兼容的 NUMERIC 或 BYTE</td></tr><tr><td>ShortTypeHandler</td><td>java.lang.Short, short</td><td>数据库兼容的 NUMERIC 或 SHORT INTEGER</td></tr><tr><td>IntegerTypeHandler</td><td>java.lang.Integer, int</td><td>数据库兼容的 NUMERIC 或 INTEGER</td></tr><tr><td>LongTypeHandler</td><td>java.lang.Long, long</td><td>数据库兼容的 NUMERIC 或 LONG INTEGER</td></tr><tr><td>FloatTypeHandler</td><td>java.lang.Float, float</td><td>数据库兼容的 NUMERIC 或 FLOAT</td></tr><tr><td>DoubleTypeHandler</td><td>java.lang.Double, double</td><td>数据库兼容的 NUMERIC 或 DOUBLE</td></tr><tr><td>BigDecimalTypeHandler</td><td>java.math.BigDecimal</td><td>数据库兼容的 NUMERIC 或 DECIMAL</td></tr><tr><td>StringTypeHandler</td><td>java.lang.String</td><td>CHAR, VARCHAR</td></tr></tbody></table><p><strong>日期类型的处理</strong><br>1、日期和时间的处理，JDK1.8以前一直是个头疼的问题。我们通常使用JSR310规范领导者Stephen Colebourne<br>创建的Joda-Time来操作。1.8已经实现全部的JSR310规范了。<br>2、日期时间处理上，我们可以使用MyBatis基于JSR310（Date and Time API）编写的各种日期时间类型处理器。<br>3、MyBatis3.4以前的版本需要我们手动注册这些处理器，以后的版本都是自动注册的。</p><p><strong>自定义类型处理器</strong><br>我们可以重写类型处理器或创建自己的类型处理<br>器来处理不支持的或非标准的类型。<br>步骤：<br>1）、实现org.apache.ibatis.type.TypeHandler接口或者继承org.apache.ibatis.type.BaseTypeHandler<br>2）、指定其映射某个JDBC类型（可选操作）<br>3）、在mybatis全局配置文件中注册</p><h3 id="plugins插件（先学习Mybatis工作原理才能理解）"><a href="#plugins插件（先学习Mybatis工作原理才能理解）" class="headerlink" title="plugins插件（先学习Mybatis工作原理才能理解）"></a>plugins插件（先学习Mybatis工作原理才能理解）</h3><p>插件是MyBatis提供的一个非常强大的机制，我们可以通过插件来修改MyBatis的一些核心行为。插件通过动态代理机制，可以介入四大对象的任何一个方法的执行。后面会有专门的章节我们来介绍mybatis运行原理以及插件</p><p><strong>四大对象</strong></p><p>• <strong>Executor</strong> (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)</p><p>• <strong>ParameterHandler</strong> (getParameterObject, setParameters) </p><p>• <strong>ResultSetHandler</strong> (handleResultSets, handleOutputParameters) </p><p>• <strong>StatementHandler</strong> (prepare, parameterize, batch, update, query) </p><h3 id="environments环境"><a href="#environments环境" class="headerlink" title="environments环境"></a>environments环境</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure><p>1、<code>&lt;environments default=&quot;&quot;/&gt;</code></p><p>• MyBatis可以配置多种环境，比如开发、测试和生产环境需要有不同的配置。 </p><p>• 每种环境使用一个environment标签进行配置并指定唯一标识符</p><p>• 可以通过environments标签中的default属性指定一个环境的标识符来快速的切换环境</p><p>2、<code>&lt;environment id=&quot;”&gt;&lt;transactionManager type=&quot;&quot;/&gt;&lt;dataSource type=&quot;&quot;&gt;&lt;/dataSource&gt;&lt;/environment&gt;</code></p><p>• id：指定当前环境的唯一标识</p><p>• transactionManager、和dataSource都必须有</p><p>3、<code>&lt;transactionManager type=&quot;JDBC|MANAGED|自定义&quot;&gt;</code></p><p>• JDBC：使用了 JDBC 的提交和回滚设置，依赖于从数据源得到的连接来管理事务范围。JdbcTransactionFactory</p><p>• MANAGED：不提交或回滚一个连接、让容器来管理事务的整个生命周期（比如 JEE 应用服务器的上下文）。 ManagedTransactionFactory</p><p>• 自定义：实现TransactionFactory接口，type&#x3D;全类名&#x2F;别名</p><p>4、<code>&lt;dataSource type=&quot;UPOOLED|POOLED|JNDI|自定义&quot;&gt;...&lt;/dataSource&gt;</code></p><p>• UNPOOLED：不使用连接池，UnpooledDataSourceFactory</p><p>• POOLED：使用连接池， PooledDataSourceFactory</p><p>• JNDI： 在EJB 或应用服务器这类容器中查找指定的数据源</p><p>• 自定义：实现DataSourceFactory接口，定义数据源的获取方式。</p><p>• 实际开发中我们使用Spring管理数据源，并进行事务控制的配置来覆盖上述配置</p><h3 id="databaseIdProvider环境（数据库的移植性）"><a href="#databaseIdProvider环境（数据库的移植性）" class="headerlink" title="databaseIdProvider环境（数据库的移植性）"></a>databaseIdProvider环境（数据库的移植性）</h3><p>MyBatis 可以根据不同的数据库厂商执行不同的语句。 </p><p>• Type： DB_VENDOR</p><p>– 使用MyBatis提供的VendorDatabaseIdProvider解析数据库厂商标识。也可以实现DatabaseIdProvider接口来自定义。 </p><p>• Property-name：数据库厂商标识</p><p>• Property-value：为标识起一个别名，方便SQL语句使用databaseId属性引用</p><p><strong>DB_VENDOR</strong></p><p>– 会通过 <strong>DatabaseMetaData#getDatabaseProductName()</strong> 返回的字符串进行设置。由于通常情况下这个字符串都非常长而且相同产品的不同版本会返回不同的值，所以最好通过设置属性别名来使其变短 </p><p>• MyBatis匹配规则如下：</p><p>1、如果没有配置databaseIdProvider标签，那么databaseId&#x3D;null</p><p>2、如果配置了databaseIdProvider标签，使用标签配置的name去匹配数据库信息，匹配上设置databaseId&#x3D;配置指定的值，否则依旧为null</p><p>3、如果databaseId不为null，他只会找到配置databaseId的sql语句</p><p>4、MyBatis 会加载不带 databaseId 属性和带有匹配当前数据库databaseId 属性的所有语句。如果同时找到带有 databaseId 和不带databaseId 的相同语句，则后者会被舍弃。</p><h3 id="mapper映射（将sql映射注册到全局配置中）"><a href="#mapper映射（将sql映射注册到全局配置中）" class="headerlink" title="mapper映射（将sql映射注册到全局配置中）"></a>mapper映射（将sql映射注册到全局配置中）</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--resource：引用类路径下的sql映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;Mapper/GoodsMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--url：引用网络路径或者磁盘路径下的sql映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">&quot;file://D://GoodsMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--class：引用（注册）接口</span></span><br><span class="line"><span class="comment">        1、有sql映射文件，映射文件名必须和接口同名，并且放在与接口同一目录下</span></span><br><span class="line"><span class="comment">        2、没有sql映射文件，所有sql都是利用注解写在接口上</span></span><br><span class="line"><span class="comment">        推荐：比较重要的DAO接口我们写sql映射文件</span></span><br><span class="line"><span class="comment">             不重要，简答的DAO接口为了快速开发可以使用注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.imooc.DAO.GoodsMapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--package：批量注解，自动扫描包下映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.imooc.DAO&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="四、Mybatis映射文件"><a href="#四、Mybatis映射文件" class="headerlink" title="四、Mybatis映射文件"></a>四、Mybatis映射文件</h2><p>映射文件指导着MyBatis如何进行数据库增删改查，有着非常重要的意义；</p><p>映射文件的元素，如下：</p><p>•cache –命名空间的二级缓存配置<br>•cache-ref – 其他命名空间缓存配置的引用。<br>•resultMap – 自定义结果集映射<br>•parameterMap – 已废弃！老式风格的参数映射<br>•sql –抽取可重用语句块。<br>•insert – 映射插入语句<br>•update – 映射更新语句<br>•delete – 映射删除语句<br>•select – 映射查询语句</p><h3 id="insert、update、delete元素"><a href="#insert、update、delete元素" class="headerlink" title="insert、update、delete元素"></a>insert、update、delete元素</h3><p>测试增删改</p><p>1、parameterType：参数类型，可以省略</p><p>2、mybatis允许增删改直接定义以下类型返回值</p><p>Integer、long、Boolean、void</p><p>3、需要手动提交commit</p><p>手动提交：sqlSessionFactory,openSession();</p><p>自动提交：sqlSessionFactory.openSession(true);</p><h3 id="主键生成方式"><a href="#主键生成方式" class="headerlink" title="主键生成方式"></a>主键生成方式</h3><p>1、mysql支持自增主键，自增主键值的获取，mybatis是利用statement.getGenreatedKeys()；</p><p><strong>useGeneratedKeys&#x3D;”true”</strong>：使用自增主键获取主键值策略</p><p>keyProperty：指定对应的主键属性（对应的JavaBean的属性名），也就是mybatis获取到主键值以后，将这个值封装给javaBean的对应的属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertGoods&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;goodsId&quot;</span> <span class="attr">databaseId</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">    insert into t_goods(title,sub_title,original_cost,current_price,discount,is_free_delivery,category_id)</span><br><span class="line">    values (#&#123;title&#125;,#&#123;subTitle&#125;,#&#123;originalCost&#125;,#&#123;currentPrice&#125;,#&#123;discount&#125;,#&#123;isFreeDelivery&#125;,#&#123;categoryId&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 2、oracle不支持自增主键，它使用的是序列来模拟自增，每次插入数据的主键是从序列中拿到的值。</p><p>获取主键值可以使用 <strong>selectKey</strong> 子元素：selectKey 元素将会首先运行，id 会被设置，然后插入语句会被调用</p><p>Order&#x3D;”BEFORE”：当前sql在插入sql之前运行</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertEmployee&quot;</span> <span class="attr">databaseId</span>=<span class="string">&quot;oracle&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">order</span>=<span class="string">&quot;BEFORE&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Integer&quot;</span>&gt;</span></span><br><span class="line">        select EMPLOYEES_SEQ.nextval from dual</span><br><span class="line">    <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">    insert into employee(EMPLOYEE_ID,LAST_NAME,EMAIL)</span><br><span class="line">    values (#&#123;id&#125;,#&#123;lastName&#125;,#&#123;email&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>执行流程：</strong></p><p>先运行selectKey查询id的sql，查出id值封装给javaBean的id属性</p><p>在运行插入的sql；就可以取出id属性对应的值</p><p>selectKey标签中各属性的作用：</p><h3 id="参数处理"><a href="#参数处理" class="headerlink" title="参数处理"></a>参数处理</h3><p>1、单参数：没有限制，通过接口方法直接传参<br>2、多个参数：mybatis会做特殊处理，多个参数被封装成一个map<br>三种方法：<br>• 使用#{param1},#{param2}…</p><p>• （命名参数）在接口方法参数前指定(@Param(“属性名”) Object 属性名,@Param(“属性名”) Object 属性名…)<br>多个参数会封装成map，key&#x3D;&#x3D;》@param(“属性名”)，value &#x3D;&#x3D;》方法参数值</p><p>• 如果多个参数正好是我们逻辑业务的数据模型，我们可以直接传入POJO<br>#{属性名}：取出传入的POJO的属性值</p><p>• 如果多个参数不是业务模型中的数据，没有对应的POJO，不经常使用为了方便，也可以传入map<br>#{key}：取出map中对应的值<br>如果多个参数不是业务模型中的数据，但经常使用，推荐来编写一个TO（Transfer Object）数据传输</p><p> Page{<br>Int index;<br>int size;<br>}</p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;思考&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>public Employee getEmp(@Param(“id”)Integer id,String lastName);<br>    取值：id&#x3D;&#x3D;&gt;#{id&#x2F;param1}   lastName&#x3D;&#x3D;&gt;#{param2}</p><p>public Employee getEmp(Integer id,@Param(“e”)Employee emp);<br>    取值：id&#x3D;&#x3D;&gt;#{param1}    lastName&#x3D;&#x3D;&#x3D;&gt;#{param2.lastName&#x2F;e.lastName}</p><p>##特别注意：如果是Collection（List、Set）类型或者是数组，<br>         也会特殊处理。也是把传入的list或者数组封装在map中。<br>            key：Collection（collection）,如果是List还可以使用这个key(list)<br>                数组(array)<br>public Employee getEmpById(List<Integer> ids);<br>    取值：取出第一个id的值：   #{list[0]}</p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;结合源码，mybatis怎么处理参数&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br><strong>总结：参数多时会封装map，为了不混乱，我们可以使用@Param来指定封装时使用的key；<br>#{key}就可以取出map中的值；</strong></p><p>(@Param(“id”)Integer id,@Param(“lastName”)String lastName);<br>ParamNameResolver解析参数封装map的；<br>&#x2F;&#x2F;1、names：{0&#x3D;id, 1&#x3D;lastName}；构造器的时候就确定好了<br>      1.获取每个标了param注解的参数的@param的值：id，lastName，赋值给name;<br>      2.每次解析一个参数给map中保存信息：（key：参数索引，value：name的值）<br>                name的值：<br>                   标注了param注解：注解的值<br>                    没有标注：<br>                        1.全局配置：useActualParamName（jdk1.8）：name&#x3D;参数名<br>                        2.name&#x3D;map.size();相当于当前的元素的索引<br>                        {0&#x3D;id,1&#x3D;lastName,2&#x3D;2}</p><h3 id="与-的区别"><a href="#与-的区别" class="headerlink" title="#{}与${}的区别"></a>#{}与${}的区别</h3><p>相同点：<br>都可以获取map中的值或者pojo对象的属性的值</p><p>不同点：<br>1.取值：#{}会用占位符预编译PreparedStatement到SQL中，${}会用字符串拼接SQL<br>2.安全性：#{}能预防SQL注入</p><p>${}的用处：原生jdbc不支持占位符的地方我们就可以使用${}进行取值<br>比如分表、排序…：按照年份分表拆分<br>             select * from ${year}_salary where xxx;<br>             select *  from tbl_employee order by ${f_name} ${order}</p><p><strong>#{}其他用法：</strong><br>   规定一些参数的规则：<br>   javaType、&#x3D;&#x3D;jdbctype&#x3D;&#x3D;、mode（存储过程）、numericScale、resultType、typeHandler、jdbcTypeName、expression（未来准备支持的功能）</p><p>   jdbcType通常需要在某种特定的条件下被设置：<br>   在我们数据为null的时候，有些数据库可能不能被识别mybatis对null的默认处理。比如Oracle（报错）；<br>   JdbcType OTHER：无效的类型；因为mybatis对所有的null都映射的是原生Jdbc的OTHER类型，orcal不认识<br>   由于全局配置：jdbcTypeForNull&#x3D;OTHER；oracle不支持；两种解决办法：<br>   1、在对应sql参数中书写#{email,jdbcType&#x3D;OTHER}<br>   2、在全局配置中设置<br>      <settings><br>         <setting name="jdbcTypeForNull" value="NULL"/><br>      </settings></p><h3 id="select元素"><a href="#select元素" class="headerlink" title="select元素"></a>select元素</h3><p>Select元素来定义查询操作。</p><p>• Id：唯一标识符。– 用来引用这条语句，需要和接口的方法名一致</p><p>• parameterType：参数类型。 – 可以不传，MyBatis会根据TypeHandler自动推断</p><p>• resultType：返回值类型。 – 别名或者全类名，如果返回的是集合，定义集合中元素的类型。不能和resultMap同时使用</p><p>1、List集合返回值的查询方法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public List<span class="tag">&lt;<span class="name">Goods</span>&gt;</span> getGoodsByTitleLike(String title);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpsByTitleLike&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.imooc.POJO.Goods&quot;</span>&gt;</span></span><br><span class="line">        select * from t_goods where title like #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>控制台输出内容：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DEBUG 05-14 17:50:44,942 ==&gt;  Preparing: select * from t_goods where title like ?  (BaseJdbcLogger.java:137) </span><br><span class="line">DEBUG 05-14 17:50:44,967 ==&gt; Parameters: %分娩%(String)  (BaseJdbcLogger.java:137) </span><br><span class="line">DEBUG 05-14 17:50:44,985 &lt;==      Total: 2  (BaseJdbcLogger.java:137) </span><br><span class="line">北京和睦家医院自然分娩+无痛套餐（宝宝树专享，限定预产期2017年9月30日前）</span><br><span class="line">北京和睦家医院自然分娩+无痛套餐（宝宝树专享，限定预产期2017年9月30日前）</span><br></pre></td></tr></table></figure><p>2、Map集合返回值的查询方法：</p><p>a.单条记录封装</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public Map&lt;String,Object&gt; getGoodsByIdReturnMap(Integer goodsId);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getGoodsByIdReturnMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">        select * from t_goods where goods_id=#&#123;goodsId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DEBUG 05-14 17:52:51,885 ==&gt;  Preparing: select * from t_goods where goods_id=?  (BaseJdbcLogger.java:137) </span><br><span class="line">DEBUG 05-14 17:52:51,909 ==&gt; Parameters: 800(Integer)  (BaseJdbcLogger.java:137) </span><br><span class="line">DEBUG 05-14 17:52:51,926 &lt;==      Total: 1  (BaseJdbcLogger.java:137) </span><br><span class="line">&#123;original_cost=279.0, sub_title=德国原产 欧洲直邮 德国 Hipp喜宝 益生菌 奶粉, is_free_delivery=1, category_id=46, goods_id=800, discount=0.892473, current_price=249.0, title=喜宝HiPP 【欧洲直邮】德国Hipp喜宝益生菌奶粉2段 600g*2&#125;</span><br></pre></td></tr></table></figure><p>b.多条记录封装，map的键为记录的主键，map的值为记录的值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@MapKey(&quot;goodsId&quot;) //告诉mybatis封装这个Map用哪个属性作为key</span><br><span class="line">  public Map&lt;Integer,Goods&gt; getGoodsByTitleLikeReturnMap(String title);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getGoodsByTitleLikeReturnMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.imooc.POJO.Goods&quot;</span>&gt;</span></span><br><span class="line">      select * from t_goods where title like #&#123;title&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>控制台输出内容：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DEBUG 05-14 18:07:17,480 ==&gt;  Preparing: select * from t_goods where title like ?  (BaseJdbcLogger.java:137) </span><br><span class="line">DEBUG 05-14 18:07:17,508 ==&gt; Parameters: %分娩%(String)  (BaseJdbcLogger.java:137) </span><br><span class="line">DEBUG 05-14 18:07:17,525 &lt;==      Total: 2  (BaseJdbcLogger.java:137) </span><br><span class="line">&#123;</span><br><span class="line">752=Goods&#123;goodsId=752, title=&#x27;北京和睦家医院自然分娩+无痛套餐（宝宝树专享，限定预产期2017年9月30日前）&#x27;, subTitle=&#x27;24小时售前咨询电话：400-891-9191&#x27;, originalCost=76000.0, currentPrice=47880.0, discount=0.63, isFreeDelivery=1, categoryId=56&#125;, </span><br><span class="line">1264=Goods&#123;goodsId=1264, title=&#x27;北京和睦家医院自然分娩+无痛套餐（宝宝树专享，限定预产期2017年9月30日前）&#x27;, subTitle=&#x27;24小时售前咨询电话：400-891-9191&#x27;, originalCost=76000.0, currentPrice=47880.0, discount=0.63, isFreeDelivery=1, categoryId=46&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="resultType属性"><a href="#resultType属性" class="headerlink" title="resultType属性"></a>resultType属性</h4><p>1、全局setting设置</p><p>– autoMappingBehavior默认是PARTIAL，开启自动映射的功能。唯一的要求是列名和javaBean属性名一致</p><p>– 如果autoMappingBehavior设置为null则会取消自动映射</p><p>– 数据库字段命名规范，POJO属性符合驼峰命名法，如A_COLUMNaColumn，我们可以开启自动驼峰命名规则映射功能，mapUnderscoreToCamelCase&#x3D;true。</p><p>2.自定义resultMap，实现高级结果集映射</p><p><strong>等效于resultType的实例如下：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//接口方法</span><br><span class="line">public Goods selectGoods(Integer id);</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--自定义某个javaBean的封装规则</span></span><br><span class="line"><span class="comment">     type：自定义规则--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;myGoods&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.imooc.POJO.Goods&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--column字段名，property属性名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;goods_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;goodsId&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;title&quot;</span> <span class="attr">property</span>=<span class="string">&quot;title&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sub_title&quot;</span> <span class="attr">property</span>=<span class="string">&quot;subTitle&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;original_cost&quot;</span> <span class="attr">property</span>=<span class="string">&quot;originalCost&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;current_price&quot;</span> <span class="attr">property</span>=<span class="string">&quot;currentPrice&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;discount&quot;</span> <span class="attr">property</span>=<span class="string">&quot;discount&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;is_free_delivery&quot;</span> <span class="attr">property</span>=<span class="string">&quot;isFreeDelivery&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;category_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;categoryId&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectGoods&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;myGoods&quot;</span>&gt;</span></span><br><span class="line">         select * from t_goods where goods_id=#&#123;goodsId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>控制台输出如下：（实现效果跟自动resultType&#x3D;Goods自动封装一样，但支持高级自定）</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DEBUG 05-14 18:33:51,774 ==&gt;  Preparing: select * from t_goods where goods_id=?  (BaseJdbcLogger.java:137) </span><br><span class="line">DEBUG 05-14 18:33:51,807 ==&gt; Parameters: 800(Integer)  (BaseJdbcLogger.java:137) </span><br><span class="line">DEBUG 05-14 18:33:51,826 &lt;==      Total: 1  (BaseJdbcLogger.java:137) </span><br><span class="line">Goods&#123;goodsId=800, title=&#x27;喜宝HiPP 【欧洲直邮】德国Hipp喜宝益生菌奶粉2段 600g*2&#x27;, subTitle=&#x27;德国原产 欧洲直邮 德国 Hipp喜宝 益生菌 奶粉&#x27;, originalCost=279.0, currentPrice=249.0, discount=0.892473, isFreeDelivery=1, categoryId=46&#125;</span><br></pre></td></tr></table></figure><h4 id="association的三种使用方法"><a href="#association的三种使用方法" class="headerlink" title="association的三种使用方法"></a>association的三种使用方法</h4><p>1.result</p><p>2.分步查询</p><p>3.延迟加载属性</p><p>每次查询Goods对象时，总是把对应id的detail信息查询出来。使用lazyLoadingEnable属性我们想要在需要时在查询出来</p><p>lazyLoadingenabled：true，开启延迟加载，按需查询</p><p>aggressiveLazyLoading：false，开启按需查询，true，关闭按需查询，全部查询出来</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;aggressiveLazyLoading&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>4.多对一查询</p><p>用N的一方GoodsDetail查询Goods的信息</p><p>代码实例如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//GoodsMapper.xml</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectGoodsById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.imooc.POJO.Goods&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from t_goods</span><br><span class="line">        where goods_id = #&#123;goodsId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//GoodsDetailMapper.xml</span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;manyToOne&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.imooc.POJO.GoodsDetail&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;gd_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;gdId&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;goods&quot;</span> <span class="attr">column</span>=<span class="string">&quot;goods_id&quot;</span> <span class="attr">select</span>=<span class="string">&quot;com.imooc.DAO.GoodsMapper.selectGoodsById&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectGoodsByAsscoiation&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;manyToOne&quot;</span>&gt;</span></span><br><span class="line">    select * from t_goods_detail where goods_id=#&#123;goodsId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一对多查询（collection）</p><p>1的一方为Goods，n的一方为GoodsDetail，查询Goods的同时查询GoodsDetail对应id信息</p><p>代码实例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1：在Goods实体类里增加goodsDet</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Goods</span> &#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">private</span> List&lt;GoodsDetail&gt; goodsDetails;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//N</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GoodsDetail</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer gdId;</span><br><span class="line">    <span class="keyword">private</span> Integer godsId;</span><br><span class="line">    <span class="keyword">private</span> String gdPicUrl;</span><br><span class="line">    <span class="keyword">private</span> Integer gdOrder;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//GoodsMapper接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">GoodsMapper</span> &#123;</span><br><span class="line"><span class="keyword">public</span> List&lt;Goods&gt; <span class="title function_">getGoodsDetailByOneToMany</span><span class="params">(Integer goodsId)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//GoodsDetailMapper接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">GoodsDetailMapper</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;GoodsDetail&gt; <span class="title function_">selectDetailById</span><span class="params">(Integer gdId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;MyGoodsByOneToMany&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.imooc.POJO.Goods&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;goods_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;goodsId&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--可以省略其他result设定，前提是javabean属性名与字段名一一对应--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--association定义关联对象的封装规则</span></span><br><span class="line"><span class="comment">           select：表名当前属性是调用select指定的方法查出的结果</span></span><br><span class="line"><span class="comment">           column=&quot;指定将那一列的值传给这个方法&quot;</span></span><br><span class="line"><span class="comment">           使用select指定的方法传入column指定的参数值，并封装给property封装的值</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;goodsDetails&quot;</span> <span class="attr">select</span>=<span class="string">&quot;com.imooc.DAO.GoodsDetailMapper.selectDetailById&quot;</span> <span class="attr">column</span>=<span class="string">&quot;goods_id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getGoodsDetailByOneToMany&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;MyGoodsByOneToMany&quot;</span>&gt;</span></span><br><span class="line">        select * from t_goods where goods_id=#&#123;goodsId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--GoodsDetail的SQL查询方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectDetailById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.imooc.POJO.GoodsDetail&quot;</span>&gt;</span></span><br><span class="line">    select * from t_goods_detail where goods_id = #&#123;gdId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="五、动态SQL"><a href="#五、动态SQL" class="headerlink" title="五、动态SQL"></a>五、动态SQL</h2><ul><li>Mybatis框架的动态SQL技术是一种根据特定条件动态拼装SQL语句的功能，它存在的意义是为了解决拼接SQL语句字符串时的痛点问题</li></ul><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><ul><li>if标签可通过test属性（即传递过来的数据）的表达式进行判断，若表达式的结果为true，则标签中的内容会执行；反之标签中的内容不会执行</li><li>在where后面添加一个恒成立条件<code>1=1</code></li><li>这个恒成立条件并不会影响查询的结果<ul><li>这个<code>1=1</code>可以用来拼接<code>and</code>语句，例如：当empName为null时</li><li>如果不加上恒成立条件，则SQL语句为<code>select * from t_emp where and age = ? and sex = ? and email = ?</code>，此时<code>where</code>会与<code>and</code>连用，SQL语句会报错<ul><li>如果加上一个恒成立条件，则SQL语句为<code>select * from t_emp where 1= 1 and age = ? and sex = ? and email = ?</code>，此时不报错</li></ul></li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getEmpByCondition(Emp emp);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">select * from t_emp where 1=1</span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">and emp_name = #&#123;empName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">and age = #&#123;age&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null and sex !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">and sex = #&#123;sex&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email != null and email !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">and email = #&#123;email&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="where"><a href="#where" class="headerlink" title="where"></a>where</h2><ul><li>where和if一般结合使用：</li><li>若where标签中的if条件都不满足，则where标签没有任何功能，即不会添加where关键字  <ul><li>若where标签中的if条件满足，则where标签会自动添加where关键字，并将条件最前方多余的and&#x2F;or去掉</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getEmpByCondition(Emp emp);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">select * from t_emp</span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">emp_name = #&#123;empName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">and age = #&#123;age&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null and sex !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">and sex = #&#123;sex&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email != null and email !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">and email = #&#123;email&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>注意：where标签不能去掉条件后多余的and&#x2F;or</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--这种用法是错误的，只能去掉条件前面的and/or，条件后面的不行--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">emp_name = #&#123;empName&#125; and</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">age = #&#123;age&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h2><ul><li>trim用于去掉或添加标签中的内容  </li><li>常用属性</li><li>prefix：在trim标签中的内容的前面添加某些内容  <ul><li>suffix：在trim标签中的内容的后面添加某些内容 </li><li>prefixOverrides：在trim标签中的内容的前面去掉某些内容  </li><li>suffixOverrides：在trim标签中的内容的后面去掉某些内容</li></ul></li><li>若trim中的标签都不满足条件，则trim标签没有任何效果，也就是只剩下<code>select * from t_emp</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getEmpByCondition(Emp emp);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">select * from t_emp</span><br><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;where&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;and|or&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">emp_name = #&#123;empName&#125; and</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">age = #&#123;age&#125; and</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null and sex !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">sex = #&#123;sex&#125; or</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email != null and email !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">email = #&#123;email&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getEmpByCondition</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line"><span class="type">DynamicSQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(DynamicSQLMapper.class);</span><br><span class="line">List&lt;Emp&gt; emps= mapper.getEmpByCondition(<span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="literal">null</span>, <span class="string">&quot;张三&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>));</span><br><span class="line">System.out.println(emps);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="choose、when、otherwise"><a href="#choose、when、otherwise" class="headerlink" title="choose、when、otherwise"></a>choose、when、otherwise</h2><ul><li><code>choose、when、otherwise</code>相当于<code>if...else if..else</code></li><li>when至少要有一个，otherwise至多只有一个</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByChoose&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">select * from t_emp</span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">emp_name = #&#123;empName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">age = #&#123;age&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;sex != null and sex != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">sex = #&#123;sex&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;email != null and email != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">email = #&#123;email&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">did = 1</span><br><span class="line"><span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getEmpByChoose</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line"><span class="type">DynamicSQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(DynamicSQLMapper.class);</span><br><span class="line">List&lt;Emp&gt; emps = mapper.getEmpByChoose(<span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="literal">null</span>, <span class="string">&quot;张三&quot;</span>, <span class="number">23</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;123@qq.com&quot;</span>, <span class="literal">null</span>));</span><br><span class="line">System.out.println(emps);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>相当于<code>if a else if b else if c else d</code>，只会执行其中一个</li></ul><h2 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h2><ul><li><p>属性：  </p></li><li><p>collection：设置要循环的数组或集合  </p><ul><li>item：表示集合或数组中的每一个数据  </li><li>separator：设置循环体之间的分隔符，分隔符前后默认有一个空格，如<code>,</code></li><li>open：设置foreach标签中的内容的开始符  </li><li>close：设置foreach标签中的内容的结束符</li></ul></li><li><p>批量删除</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int deleteMoreByArray(Integer[] eids);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteMoreByArray&quot;</span>&gt;</span></span><br><span class="line">delete from t_emp where eid in</span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;eids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">#&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteMoreByArray</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line"><span class="type">DynamicSQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(DynamicSQLMapper.class);</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> mapper.deleteMoreByArray(<span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;);</span><br><span class="line">System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>批量添加</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int insertMoreByList(@Param(&quot;emps&quot;) List&lt;Emp&gt; emps);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertMoreByList&quot;</span>&gt;</span></span><br><span class="line">insert into t_emp values</span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">item</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">(null,#&#123;emp.empName&#125;,#&#123;emp.age&#125;,#&#123;emp.sex&#125;,#&#123;emp.email&#125;,null)</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertMoreByList</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line"><span class="type">DynamicSQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(DynamicSQLMapper.class);</span><br><span class="line"><span class="type">Emp</span> <span class="variable">emp1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="literal">null</span>,<span class="string">&quot;a&quot;</span>,<span class="number">1</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;123@321.com&quot;</span>,<span class="literal">null</span>);</span><br><span class="line"><span class="type">Emp</span> <span class="variable">emp2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="literal">null</span>,<span class="string">&quot;b&quot;</span>,<span class="number">1</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;123@321.com&quot;</span>,<span class="literal">null</span>);</span><br><span class="line"><span class="type">Emp</span> <span class="variable">emp3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="literal">null</span>,<span class="string">&quot;c&quot;</span>,<span class="number">1</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;123@321.com&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">List&lt;Emp&gt; emps = Arrays.asList(emp1, emp2, emp3);</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> mapper.insertMoreByList(emps);</span><br><span class="line">System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
    <summary type="html">尚硅谷版Mybatis学习笔记</summary>
    
    
    
    <category term="Java framework" scheme="http://example.com/categories/Java-framework/"/>
    
    
    <category term="Java framework" scheme="http://example.com/tags/Java-framework/"/>
    
  </entry>
  
  <entry>
    <title>两数之和</title>
    <link href="http://example.com/posts/7fd48667.html"/>
    <id>http://example.com/posts/7fd48667.html</id>
    <published>2022-11-17T09:00:00.000Z</published>
    <updated>2022-11-18T05:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h1><p>⭐️难度：简单</p><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> <em><code>target</code></em> 的那 <strong>两个</strong> 整数，并返回它们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。<br>你可以按任意顺序返回答案。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2,7,11,15], target = 9</span><br><span class="line">输出：[0,1]</span><br><span class="line">解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,2,4], target = 6</span><br><span class="line">输出：[1,2]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,3], target = 6</span><br><span class="line">输出：[0,1]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>2 &lt;= nums.length &lt;= 104</code></li><li><code>-109 &lt;= nums[i] &lt;= 109</code></li><li><code>-109 &lt;= target &lt;= 109</code></li><li><strong>只会存在一个有效答案</strong><br><strong>进阶：</strong>你可以想出一个时间复杂度小于 <code>O(n2)</code> 的算法吗？</li></ul><p>答案：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">           <span class="type">int</span> n=nums.length;</span><br><span class="line">           <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">               <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line">                   <span class="keyword">if</span>(nums[i]+nums[j]==target)&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;i,j&#125;;</span><br><span class="line">                        &#125;</span><br><span class="line">               &#125;</span><br><span class="line">          &#125;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Leetcode简单算法学习</summary>
    
    
    
    <category term="Leetcode" scheme="http://example.com/categories/Leetcode/"/>
    
    
    <category term="Leetcode" scheme="http://example.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>回文数</title>
    <link href="http://example.com/posts/7fd48667.html"/>
    <id>http://example.com/posts/7fd48667.html</id>
    <published>2022-11-17T09:00:00.000Z</published>
    <updated>2022-11-18T05:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="回文数"><a href="#回文数" class="headerlink" title="回文数"></a>回文数</h1><p>⭐️难度：简单</p><p>给你一个整数 <code>x</code> ，如果 <code>x</code> 是一个回文整数，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p>回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p><p>例如，<code>121</code> 是回文，而 <code>123</code> 不是。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：x = 121</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入： x = -121</span><br><span class="line">输出：false</span><br><span class="line">解释：从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：x = 10</span><br><span class="line">输出：false</span><br><span class="line">解释：从右向左读, 为 01 。因此它不是一个回文数。</span><br></pre></td></tr></table></figure><p>提示：</p><ul><li><code>-231 &lt;= x &lt;= 231 - 1</code></li></ul><p>进阶：你能不将整数转为字符串来解决这个问题吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="comment">// 特殊情况：</span></span><br><span class="line">        <span class="comment">// 如上所述，当 x &lt; 0 时，x 不是回文数。</span></span><br><span class="line">        <span class="comment">// 同样地，如果数字的最后一位是 0，为了使该数字为回文，</span></span><br><span class="line">        <span class="comment">// 则其第一位数字也应该是 0</span></span><br><span class="line">        <span class="comment">// 只有 0 满足这一属性</span></span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span> || (x % <span class="number">10</span> == <span class="number">0</span> &amp;&amp; x != <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">revertedNumber</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x &gt; revertedNumber) &#123;</span><br><span class="line">            revertedNumber = revertedNumber * <span class="number">10</span> + x % <span class="number">10</span>;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当数字长度为奇数时，我们可以通过 revertedNumber/10 去除处于中位的数字。</span></span><br><span class="line">        <span class="comment">// 例如，当输入为 12321 时，在 while 循环的末尾我们可以得到 x = 12，revertedNumber = 123，</span></span><br><span class="line">        <span class="comment">// 由于处于中位的数字不影响回文（它总是与自己相等），所以我们可以简单地将其去除。</span></span><br><span class="line">        <span class="keyword">return</span> x == revertedNumber || x == revertedNumber / <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Leetcode简单算法学习</summary>
    
    
    
    <category term="Leetcode" scheme="http://example.com/categories/Leetcode/"/>
    
    
    <category term="Leetcode" scheme="http://example.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>第一篇文章</title>
    <link href="http://example.com/posts/5c2fafc7.html"/>
    <id>http://example.com/posts/5c2fafc7.html</id>
    <published>2022-10-28T09:00:00.000Z</published>
    <updated>2022-11-06T11:25:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="这是我第一篇文章"><a href="#这是我第一篇文章" class="headerlink" title="这是我第一篇文章"></a>这是我第一篇文章</h2><h3 id="练习一下博客"><a href="#练习一下博客" class="headerlink" title="练习一下博客"></a>练习一下博客</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;这是我第一篇文章&quot;&gt;&lt;a href=&quot;#这是我第一篇文章&quot; class=&quot;headerlink&quot; title=&quot;这是我第一篇文章&quot;&gt;&lt;/a&gt;这是我第一篇文章&lt;/h2&gt;&lt;h3 id=&quot;练习一下博客&quot;&gt;&lt;a href=&quot;#练习一下博客&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="Demo" scheme="http://example.com/categories/Demo/"/>
    
    
    <category term="Demo" scheme="http://example.com/tags/Demo/"/>
    
  </entry>
  
  <entry>
    <title>心情笔记</title>
    <link href="http://example.com/posts/f4b4b970.html"/>
    <id>http://example.com/posts/f4b4b970.html</id>
    <published>2022-10-28T09:00:00.000Z</published>
    <updated>2022-11-06T11:25:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>xxxxxxxxxxxxxxxxx</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;xxxxxxxxxxxxxxxxx&lt;/p&gt;
</summary>
      
    
    
    
    <category term="notes" scheme="http://example.com/categories/notes/"/>
    
    
    <category term="notes" scheme="http://example.com/tags/notes/"/>
    
  </entry>
  
</feed>
