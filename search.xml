<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java集合学习笔记</title>
      <link href="/posts/ff72b94.html"/>
      <url>/posts/ff72b94.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、Java-集合框架概述"><a href="#一、Java-集合框架概述" class="headerlink" title="一、Java 集合框架概述"></a>一、Java 集合框架概述</h3><p>1.一方面，而向对象语言对事物的体现都是以对象的形式，为了方便对多个对象的操作，就要对对象进行存储。另一方而，使用Array存储对象方面具有一些弊端，而Java 集合就像一种容器，可以动态地把多个对象的引用放入容器中。<br>＞数组在内存存储方面的特点：<br>数组初始化以后，长度就确定了。<br>数组声明的类型，就决定了进行元素初始化时的类型<br>＞数组在存储数据方面的弊端：<br>数组初始化以后，长度就不可变了，不便于扩展<br>数組中提供的属性和方法少，不便于进行添加、删除、插入等操作，且效率不高，同时无法自接获取存储元素的个数<br>数组存储的数据是有序的、可以重复的。—&gt;存储数据的特点单一<br>2.Java 集合类可以用于存储数量不等的多个对象，还可用于保存具有映射关系的关联数组。</p><h3 id="二、Java集合框架"><a href="#二、Java集合框架" class="headerlink" title="二、Java集合框架"></a>二、Java集合框架</h3><p>1.Java 集合可分为 Collection 和 Map 两种体系<br>Collection接口：单列数据，定义了存取一组对象的方法的集合<br>  List：元素有序、可重复的集合<br>  Set：元素无序、不可重复的集合<br>Map接口：双列数据，保存具有映射关系“key-value对”的集合</p><p>2.Collection接口继承树</p><p>|——ColLlection接口：学列案合，用来存储一个一个的对家<br>           |——List接口：存储有序的、可重复的数据。—&gt;“动态”数组<br>           |——Set接口：存储无序的、不可更友的数捂—＞高中讲的”集合“</p><p><img src="/Users/yimoorua/Library/Application Support/typora-user-images/image-20220815183234521.png" alt="image-20220815183234521"> </p><p>3.Map接口继承树</p><p>|——Map 供口：双列集台，用来存储一对(key - vaLue)一对的数据 —&gt;高中函数：y=f(x)</p><p><img src="/Users/yimoorua/Library/Application Support/typora-user-images/image-20220815183320227.png" alt="image-20220815183320227"> </p><h3 id="三、Collection接口中常用的方法"><a href="#三、Collection接口中常用的方法" class="headerlink" title="三、Collection接口中常用的方法"></a>三、Collection接口中常用的方法</h3><p>常用方法1：add()添加元素到集合中<br>常用方法2：size()集合长度<br>常用方法3：addAll()添加集合的元素到集合中<br>常用方法4：isEmpty()判断当前元素是否为空！<br>常用方法5：clear()清空元素<br>常用方法6：contains(Object object):判断当前集合中是否包含obj;<br>常用方法7：containsAll()判断形参collection中的所有元素是否都存在于当前集合中<br>常用方法8：remove()移除对象，返回true和false<br>常用方法9：removeAll()从当前集合移除另一个集合中相同的所有元素，求差集<br>常用方法10：retainAll()求交集<br>常用方法11：equals() 一个一个元素的比较，ArrayList是顺序比较<br>常用方法12：hashCode():返回当前对象的哈希值<br>常用方法13：toArray()把集合变成数组<br>常用方法14：数组转换成集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//声明一个ArrayList()集合</span></span><br><span class="line">        <span class="type">Collection</span> <span class="variable">collection</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//常用方法1：add()添加元素到集合中</span></span><br><span class="line">        collection.add(<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">        collection.add(<span class="string">&quot;BB&quot;</span>);</span><br><span class="line">        collection.add(<span class="number">123</span>);</span><br><span class="line">        collection.add(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="comment">//常用方法：size()集合长度</span></span><br><span class="line">        System.out.println(collection.size());<span class="comment">//4</span></span><br><span class="line">        <span class="type">Collection</span> <span class="variable">collection1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        collection1.add(<span class="string">&quot;DD&quot;</span>);</span><br><span class="line">        <span class="comment">//常用方法3：addAll()添加集合的元素到集合中</span></span><br><span class="line">        collection1.addAll(collection);</span><br><span class="line">        System.out.println(collection1.size());<span class="comment">//5</span></span><br><span class="line">        System.out.println(collection1);<span class="comment">//[DD, AA, BB, 123, Mon Aug 15 18:50:35 CST 2022]</span></span><br><span class="line">        <span class="comment">//常用方法4：isEmpty()判断当前元素是否为空！</span></span><br><span class="line">        System.out.println(collection.isEmpty());<span class="comment">//false</span></span><br><span class="line">        <span class="comment">//常用方法5：clear()清空元素</span></span><br><span class="line">        collection.clear();</span><br><span class="line">        System.out.println(collection.isEmpty());</span><br><span class="line">        System.out.println(collection.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Collection</span> <span class="variable">collection</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        collection.add(<span class="number">123</span>);</span><br><span class="line">        collection.add(<span class="number">456</span>);</span><br><span class="line">        collection.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">        collection.add(<span class="literal">false</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;yimoo&quot;</span>, <span class="number">25</span>);</span><br><span class="line">        collection.add(person);</span><br><span class="line">        collection.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;yimoo&quot;</span>, <span class="number">25</span>));</span><br><span class="line">        <span class="comment">//常用方法6：contains(Object object):判断当前集合中是否包含obj;</span></span><br><span class="line">        <span class="comment">//向Collection接口的实现类的对象中添加数据obj时，要求obj所在的类要重写equals();</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> collection.contains(<span class="literal">false</span>);</span><br><span class="line">        System.out.println(flag);<span class="comment">//true</span></span><br><span class="line">        <span class="comment">//比较的是对象里的内容</span></span><br><span class="line">        System.out.println(collection.contains(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Tom&quot;</span>)));<span class="comment">//true</span></span><br><span class="line">        System.out.println(collection.contains(person));<span class="comment">//true</span></span><br><span class="line">        <span class="comment">//常用方法7：containsAll()判断形参collection中的所有元素是否都存在于当前集合中</span></span><br><span class="line">        <span class="type">Collection</span> <span class="variable">collection1</span> <span class="operator">=</span> Arrays.asList(<span class="number">123</span>, <span class="number">456</span>);<span class="comment">//快速创建集合</span></span><br><span class="line">        System.out.println(collection.containsAll(collection1));<span class="comment">//true</span></span><br><span class="line">        <span class="comment">//常用方法8：remove()移除对象，返回true和false</span></span><br><span class="line">        System.out.println(collection.remove(<span class="number">123</span>));<span class="comment">//true,会调用equals方法判断对象是否存在</span></span><br><span class="line">        <span class="comment">//常用方法9：removeAll()从当前集合移除另一个集合中相同的所有元素，求差集</span></span><br><span class="line">        <span class="type">Collection</span> <span class="variable">collection2</span> <span class="operator">=</span> Arrays.asList(<span class="number">456</span>, <span class="number">789</span>);</span><br><span class="line">        collection.removeAll(collection2);</span><br><span class="line">        System.out.println(collection);<span class="comment">//[Tom, false, Person&#123;name=&#x27;yimoo&#x27;, age=25&#125;, Person&#123;name=&#x27;yimoo&#x27;, age=25&#125;]</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Collection</span> <span class="variable">collection</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        collection.add(<span class="number">123</span>);</span><br><span class="line">        collection.add(<span class="number">456</span>);</span><br><span class="line">        collection.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">        collection.add(<span class="literal">false</span>);</span><br><span class="line">        <span class="type">Collection</span> <span class="variable">collection1</span> <span class="operator">=</span> Arrays.asList(<span class="number">123</span>, <span class="number">456</span>, <span class="number">789</span>);</span><br><span class="line">        <span class="comment">//常用方法10：retainAll()求交集</span></span><br><span class="line">        collection.retainAll(collection1);</span><br><span class="line">        System.out.println(collection);<span class="comment">//[123, 456]</span></span><br><span class="line">        <span class="comment">//常用方法11：equals() 一个一个元素的比较，ArrayList是顺序比较</span></span><br><span class="line">        <span class="type">Collection</span> <span class="variable">collection2</span> <span class="operator">=</span> Arrays.asList(<span class="number">456</span>, <span class="literal">false</span>);</span><br><span class="line">        System.out.println(collection.equals(collection2));<span class="comment">//false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Collection</span> <span class="variable">collection</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        collection.add(<span class="number">123</span>);</span><br><span class="line">        collection.add(<span class="number">456</span>);</span><br><span class="line">        collection.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">        collection.add(<span class="literal">false</span>);</span><br><span class="line">        <span class="comment">//常用方法12：hashCode():返回当前对象的哈希值</span></span><br><span class="line">        System.out.println(collection.hashCode());<span class="comment">//7639761</span></span><br><span class="line">        <span class="comment">//常用方法13：toArray()把集合变成数组</span></span><br><span class="line">        Object[] arrs = collection.toArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arrs.length; i++) &#123;</span><br><span class="line">            System.out.print(arrs[i] + <span class="string">&quot; &quot;</span>);<span class="comment">//123 456 Tom false</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//常用方法14：数组转换成集合</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> Arrays.asList(arrs);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="comment">//注意以下情况：如果将int类型数组转换为集合，直接放值即可或者使用Integer包装类</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">arr1</span> <span class="operator">=</span> Arrays.asList(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">123</span>, <span class="number">456</span>&#125;);</span><br><span class="line">        System.out.println(arr1.size());<span class="comment">//1</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">arr2</span> <span class="operator">=</span> Arrays.asList(<span class="number">123</span>, <span class="number">456</span>);</span><br><span class="line">        System.out.println(arr2.size());<span class="comment">//2</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">arr3</span> <span class="operator">=</span> Arrays.asList(<span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;<span class="number">123</span>, <span class="number">456</span>&#125;);</span><br><span class="line">        System.out.println(arr3.size());<span class="comment">//2</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="四、使用-Iterator-接门遍历集合元素"><a href="#四、使用-Iterator-接门遍历集合元素" class="headerlink" title="四、使用 Iterator 接门遍历集合元素"></a>四、使用 Iterator 接门遍历集合元素</h3><ul><li>Iterator对象称为迭代器(设计模式的一种)，主要用于遍历 Collection 集合中的元素。</li><li>GOF给迭代器模式的定义为：捉供一种方法访问一个容器(container)对象中各个元素，而又不需暴露该对象的内部细节。迭代器模式，就是为容器而生。类似于“公交车上的售票员”、“火车上的乘务员”、“空姐”</li><li>Collection接口继承了java.lang.Iterable 接口，该接口有一个iterator()方法，那么所有实现了 Collection接口的集合类都有一个iterator()方法，用以返回一个实现了Iterator接口的对象。</li><li>Iterator 仅用于遍历集合，Iterator 本身并不提供承装对象的能力。如果需要创建Iterator 对象，则必须有一个被迭代的集合。</li><li>集合对象每次调用iterator()方法都得到一个全新的迭代器对象，默认游标都在集合的第一个元素之前。</li><li>hasNext()、next()、remove()三种常用方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Collection</span> <span class="variable">collection</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    collection.add(<span class="number">123</span>);</span><br><span class="line">    collection.add(<span class="number">456</span>);</span><br><span class="line">    collection.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">    collection.add(<span class="literal">false</span>);</span><br><span class="line">    <span class="comment">//创建iterator对象，不是容器</span></span><br><span class="line">    <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> collection.iterator();</span><br><span class="line">    <span class="comment">//遍历集合元素方式一：</span></span><br><span class="line">    <span class="comment">//System.out.println(iterator.next());//123</span></span><br><span class="line">    <span class="comment">//System.out.println(iterator.next());//456</span></span><br><span class="line">    <span class="comment">//遍历集合元素方式二：</span></span><br><span class="line">    <span class="comment">//hasNext()判断是否还有下一个元素</span></span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">      <span class="comment">//next() ①指针下移 ②将下移以后的集合位置上的元素返回</span></span><br><span class="line">        System.out.println(iterator.next());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//remove()删除集合中的一个元素</span></span><br><span class="line"><span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">    Object o=iterator.next();</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&quot;Tom&quot;</span>.equals(o))&#123;</span><br><span class="line">        iterator.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(collection.size());<span class="comment">//3</span></span><br></pre></td></tr></table></figure><h3 id="五、Collection子接口之一：List接口"><a href="#五、Collection子接口之一：List接口" class="headerlink" title="五、Collection子接口之一：List接口"></a>五、Collection子接口之一：List接口</h3><p><strong>List接口概述</strong></p><ul><li>鉴于Java中数组用来存储数据的局限性，我们通常使用List替代数组</li><li>List集合类中元素有序、且可重复，集合中的每个元素都有其对应的顺序索引。</li><li>List容器中的元素都对应一个整数型的序号记载其在容器中的位置，可以根据序号存取容器中的元素。</li><li>JDK API中List接口的实现类常用的有：ArrayList、 LinkedList利Vector。</li></ul><p><strong>面试题：</strong></p><p>ArrayList、 LinkedList、 Vector三者的异同？</p><p>同：三个类都是实现了List接口，存储数据的特点相同：存储有序的、可重复的数据</p><p>异：① ArrayList：作为List接口的主要实现类；线程不安全的，效率高；底层使用object[] elementData 存储</p><p>​        ② LinkedList：对于频繁的插入，删除操作，使用此类效率比ArrayList高；底层使用双向链表存储</p><p>​        ③ Vector：作为List接口的古老实现类；线程安全的，效率低；底层使用Object[] elementData存储</p><h4 id="1-ArrayList的源码分折"><a href="#1-ArrayList的源码分折" class="headerlink" title="1.ArrayList的源码分折"></a><strong>1.ArrayList的源码分折</strong></h4><p><strong>jdk 7情况下</strong></p><ul><li>ArrayList List = new Arraylist();//底层创建了长度是10的object[]数组elementData</li><li>List.add(123);//elementData[0] = new Integer (123)；</li><li>…</li><li>List.add(11);//如果此次的添加导致底层elementData数组容量不够，则扩容。</li><li>默认情况下，扩容为原来的容量的1.5倍，同时需要将原有数组中的数据复制到新的数组中。</li></ul><p>结论：建议开发中使用带参的构造器：ArrayList list = new ArrayList(int capacity)</p><p><strong>jdk 8 中ArrayList的变化：</strong></p><ul><li><p>ArrayList list = new ArrayList(); //底层object[] eLementData初始化为{}.并没有创建长度为10的数组</p></li><li><p>List.add(123);//第一次调用add()时，底层才创建了长度10的数组，并将数据123添加到elementData[0]</p></li><li><p>…<br>后续的添加和扩容操作与jdk 7无异。</p><p>==小结：jdk7中的ArrayList的对象的创建类似于单例的饿汉式，而jdk8中的ArrayList的对象的创建类似于单例的懒汉式，延迟了数组的创建，节省内存。==</p></li></ul><h4 id="2-LinkedList源码分析"><a href="#2-LinkedList源码分析" class="headerlink" title="2.LinkedList源码分析"></a><strong>2.LinkedList源码分析</strong></h4><p>LinkedList List = new Linkedlist()；內部声明了Node 类型的first和Last属性，默认值为null<br>List.add(123)；//将123封装到Node中，创建了Node 对象。</p><p>其中，Node 定义为：体现了LinkedList的双向链表的说法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;E&gt; &#123;</span><br><span class="line">    E item;</span><br><span class="line">    Node&lt;E&gt; next;</span><br><span class="line">    Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">Node (Node&lt;E&gt; prev, E element, Node&lt;E〉 next) &#123;</span><br><span class="line"><span class="built_in">this</span>.item = element;</span><br><span class="line"><span class="built_in">this</span>.next = next;</span><br><span class="line"><span class="built_in">this</span>.prev = prev;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/Users/yimoorua/Library/Application Support/typora-user-images/image-20220815233306710.png" alt="image-20220815233306710"></p><h4 id="3-Vector的源码分折"><a href="#3-Vector的源码分折" class="headerlink" title="3.Vector的源码分折"></a>3.Vector的源码分折</h4><p>jdk7利jdk8中通过Vector()构造器创建对象时，底层都创建了长度为10的数组.</p><p>在扩容方面，默以扩容为原来的数组长度的2倍。</p><h4 id="List集合中常用的方法"><a href="#List集合中常用的方法" class="headerlink" title="List集合中常用的方法"></a>List集合中常用的方法</h4><p>1.void add(int index, Object ele)：在index位置插入ele元素<br>2.boolean addALL(int index, CoLLection eles)：从index位置开始将eLes 中的所有元素添加进来<br>3.Object get(int index)：获取指定index 位置的元素<br>4.int indexof (Object obj)：返回obj在集合中首次出现的位置<br>5.int LastIndexof(Object obj)：返回obj在当前集合中末次出现的位置<br>6.Object remove(int index)：移除指定index位置的元素，并返回此元素<br>7.Object set(int index, Object ele)：设置指定index位置的元素为ele<br>8.List subList(int fromIndex, int toIndex)：返回从fromIndex到toIndex位置的子集合</p><p><strong>总结常用方法</strong>    增：add()、、删：remove() / removeAll()、改：set()、查：get()、插：add(int index,Object ele)、</p><p>长度：size()、遍历：①Iterator迭代器方式 ②增强for循环 ③普通的循环、</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">arrayList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        arrayList.add(<span class="number">123</span>);</span><br><span class="line">        arrayList.add(<span class="number">456</span>);</span><br><span class="line">        arrayList.add(<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">        arrayList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Tom&quot;</span>, <span class="number">12</span>));</span><br><span class="line">        arrayList.add(<span class="number">456</span>);</span><br><span class="line">        System.out.println(arrayList);<span class="comment">//[123, 456, AA, Person&#123;name=&#x27;Tom&#x27;, age=12&#125;, 456]</span></span><br><span class="line">        System.out.println(<span class="string">&quot;**********************************&quot;</span>);</span><br><span class="line"><span class="comment">//        void add(int index, Object ele)：在index位置插入ele元素</span></span><br><span class="line">        arrayList.add(<span class="number">2</span>, <span class="string">&quot;Yimoo&quot;</span>);</span><br><span class="line">        System.out.println(arrayList);<span class="comment">//[123, 456, Yimoo, AA, Person&#123;name=&#x27;Tom&#x27;, age=12&#125;, 456]</span></span><br><span class="line">        System.out.println(<span class="string">&quot;**********************************&quot;</span>);</span><br><span class="line"><span class="comment">//        boolean addALL(int index, CoLLection eles)：从index位置开始将eLes 中的所有元素添加进来</span></span><br><span class="line">        <span class="type">Collection</span> <span class="variable">collection</span> <span class="operator">=</span> Arrays.asList(<span class="string">&quot;杨皓&quot;</span>, <span class="string">&quot;穷逼&quot;</span>);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> arrayList.addAll(collection);</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;插入成功！\n&quot;</span> + arrayList);</span><br><span class="line">          <span class="comment">//插入成功！[123, 456, Yimoo, AA, Person&#123;name=&#x27;Tom&#x27;, age=12&#125;, 456, 杨皓, 穷逼]</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;**********************************&quot;</span>);</span><br><span class="line"><span class="comment">//        Object get(int index)：获取指定index 位置的元素</span></span><br><span class="line">        System.out.println(arrayList.get(<span class="number">3</span>));<span class="comment">//AA</span></span><br><span class="line">        System.out.println(<span class="string">&quot;**********************************&quot;</span>);</span><br><span class="line"><span class="comment">//        int indexof (Object obj)：返回obj在集合中首次出现的位置</span></span><br><span class="line">        System.out.println(arrayList.indexOf(<span class="string">&quot;杨皓&quot;</span>));<span class="comment">//6</span></span><br><span class="line">        System.out.println(<span class="string">&quot;**********************************&quot;</span>);</span><br><span class="line"><span class="comment">//        int LastIndexof(Object obj)：返回obj在当前集合中末次出现的位置</span></span><br><span class="line">        System.out.println(arrayList.lastIndexOf(<span class="string">&quot;456&quot;</span>));<span class="comment">//-1</span></span><br><span class="line">        System.out.println(<span class="string">&quot;**********************************&quot;</span>);</span><br><span class="line"><span class="comment">//        Object remove(int index)：移除指定index位置的元素，并返回此元素</span></span><br><span class="line">        System.out.println(arrayList.remove(<span class="number">1</span>));<span class="comment">//456</span></span><br><span class="line">        System.out.println(arrayList);</span><br><span class="line">      <span class="comment">//[123, Yimoo, AA, Person&#123;name=&#x27;Tom&#x27;, age=12&#125;, 456, 杨皓, 穷逼]</span></span><br><span class="line">        System.out.println(<span class="string">&quot;**********************************&quot;</span>);</span><br><span class="line"><span class="comment">//        Object set(int index, Object ele)：设置指定index位置的元素为ele</span></span><br><span class="line">        arrayList.set(<span class="number">6</span>, <span class="string">&quot;高富帅&quot;</span>);</span><br><span class="line">        System.out.println(arrayList);</span><br><span class="line">      <span class="comment">//[123, Yimoo, AA, Person&#123;name=&#x27;Tom&#x27;, age=12&#125;, 456, 杨皓, 高富帅]</span></span><br><span class="line">        System.out.println(<span class="string">&quot;**********************************&quot;</span>);</span><br><span class="line"><span class="comment">//        List subList(int fromIndex, int toIndex)：返回从fromIndex到toIndex位置的子集合</span></span><br><span class="line">        System.out.println(arrayList.subList(<span class="number">2</span>, <span class="number">4</span>));<span class="comment">//[AA, Person&#123;name=&#x27;Tom&#x27;, age=12&#125;]</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="六、Collection子接口之二：Set-接口"><a href="#六、Collection子接口之二：Set-接口" class="headerlink" title="六、Collection子接口之二：Set 接口"></a>六、Collection子接口之二：Set 接口</h3><ul><li>Set接口是Collection的子接口，set接口没有提供额外的方法</li><li>Set 集合不允许包含相同的元素，如果试把两个相同的元素加入同一个Set 集合中，则添加操作失败。</li><li>Set 判断两个对象是否相同不是使用三元运算符，而是根据 equals() 方法</li></ul><p>Set：存储无序的、不可重复的数据<br>以HashSet 为例说明：<br>1.无序性：不等于随机性。存储的数据在底层数组中并非按照数组索引的顺序添加，而是根据数据的哈希值决定</p><p>2.不可重复性：保证添加的元素按照equals()判断时，不能返回true.即：相同的元系只能添加一个。</p><p>Set接口的实现类：</p><h4 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h4><p><strong>HashSet</strong>：作为Set接口的主要实现类；线程不安全的；可以存储null值；</p><ul><li><p>Hashset 是 Set 接口的典型实现，大多数时候使用 Set 集合时都使用这个买现类。</p></li><li><p>HashSet 按 Hash 算法来行储集合中的元东，因此具有很好的存取、查找、删除性能。</p></li><li><p>HashSet 具有以下特点：<br>   ＞不能保证元素的排列顺序<br>   ＞HashSet 不是线程安全的<br>   ＞集合元素可以是 null</p></li><li><p>HashSet 集合判断两个元素相等的标准：两个对象通过 hashCode() 方法比较相等，并且两个对象的 equals() 方法返回值也相等。</p></li><li><p>对于存放在Set容器中的对象，对应的类一定要重写equals()和hashCode(Object obj)方法，以实现对象相等规则。即：“相等的对象必须具有相等的散列码”</p></li><li><p>二、添加元素的过程：</p><blockquote><p>以HashSet为例：<br>我们向HashSet 中添加元素a，首先调用元素a所在类的hashCode() 方法，计算元素a的哈希值，<br>此哈希值接着通过某种算法计算出在HashSet 底层数组中的存放位置（即为：素引位置），判断数组此位置上是否已经有元素：<br>如果此位置上没有其他元素，则元素a添加成功。—-&gt;情况1<br>如果此位置上有其他元素b(或以链表形式存在的多个元素），则比较元素a与元素b的hash值：<br>如果hash值不相同，则元素a添加成功。—-＞情况2<br>如果hash值相同，进而需要调用元素a所在类equlas()方法：<br>equals()返回true，元素a添加失败<br>equals()返回false，刚元素添加成功。—-&gt;情况2<br>对于添加成功的情况2和情况3而言：元素a与己经存在指定索引位置上数据以链表的方式存储。<br>jdk 7:元素放到数组中，指向原来的元素，<br>jdk 8：原来的元素在数组中，指向元素a<br>总结：七上八才</p></blockquote><p>以Eclipse/IDEA为例，在自定义类中可以调用工具自动重写equals利hashCode。<br><strong>问题：为什么用Eclipse/IDEA复写hashsode方法，有31这个数字？</strong></p></li></ul><blockquote><p>选择系数的时候要选择尽量大的系数。因为如果计算出来的hash地址越大，所谓的“冲突”就越少，查找起来效率也会提高。（减少冲突）<br>并且31只占用5bits,相乘造成数据溢出的概率较小。<br>31可以由*31==(1&lt;&lt;5)-1来表示,现在很多虚拟机里面都有做相关优化。（提高算法效率）<br>31是一个素数，素数作用就是如果我用一个数字来乘以这个素数，那么最终出来的结果只能被素数本身和被乘数还有1来整除！（减少冲突）</p></blockquote><h4 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h4><p><strong>LinkedHashSet</strong>：作为HashSet的子类；遍历其内部数据时，可以按照添加的顺序遍历；</p><p>对于频繁的遍历操作，LinkedHashSet效率高于HashSet</p><h4 id="TreeSet（了解）"><a href="#TreeSet（了解）" class="headerlink" title="TreeSet（了解）"></a>TreeSet（了解）</h4><p><strong>TreeSet</strong>：可以按照添加对象的指定属性，进行排序。</p><p>两种排序方式：自然排序（实现Comparable接口）和定制排序</p><p>自然排序中，比较两个对象是否相同的标准为：compareTo(）返回0.不再是equals(）。</p><p>定制排序中，比较两个对象是否相同的标准为：compare(）返回0.不再是equals().</p><p><strong>练习</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List <span class="title function_">duplicateList</span><span class="params">(List list)</span> &#123;</span><br><span class="line">    <span class="type">HashSet</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">    set.addAll(list);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>(set);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//练习1：在list內去除重复数字值，要求尽量简单</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">2</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">2</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">3</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">4</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">5</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">5</span>));</span><br><span class="line">    <span class="type">List</span> <span class="variable">list1</span> <span class="operator">=</span> duplicateList(list);</span><br><span class="line">    <span class="keyword">for</span> (Object integer : list1) &#123;</span><br><span class="line">        System.out.println(integer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//面试题:说说以下的输出</span></span><br><span class="line"><span class="comment">//其中Person类中重写了hashCode()和equal()方法</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">HashSet</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">    <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">1001</span>,<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">    <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">1002</span>,<span class="string">&quot;BB&quot;</span>);</span><br><span class="line">    set.add(p1);</span><br><span class="line">    set.add(p2);</span><br><span class="line">    System.out.println(set);<span class="comment">//[Person&#123;num=1002, grade=&#x27;BB&#x27;&#125;, Person&#123;num=1001, grade=&#x27;AA&#x27;&#125;]</span></span><br><span class="line">    p1.setGrade(<span class="string">&quot;CC&quot;</span>);</span><br><span class="line">    set.remove(p1);</span><br><span class="line">    System.out.println(set);<span class="comment">//[Person&#123;num=1002, grade=&#x27;BB&#x27;&#125;, Person&#123;num=1001, grade=&#x27;CC&#x27;&#125;]</span></span><br><span class="line">    set.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">1001</span>,<span class="string">&quot;CC&quot;</span>));</span><br><span class="line">     System.out.println(set);<span class="comment">//[Person&#123;num=1002, grade=&#x27;BB&#x27;&#125;, Person&#123;num=1001, grade=&#x27;CC&#x27;&#125;, Person&#123;num=1001, grade=&#x27;CC&#x27;&#125;]</span></span><br><span class="line">    set.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">1001</span>,<span class="string">&quot;AA&quot;</span>));</span><br><span class="line">    System.out.println(set);<span class="comment">//[Person&#123;num=1002, grade=&#x27;BB&#x27;&#125;, Person&#123;num=1001, grade=&#x27;CC&#x27;&#125;, Person&#123;num=1001, grade=&#x27;CC&#x27;&#125;, Person&#123;num=1001, grade=&#x27;AA&#x27;&#125;]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="七、Map接口"><a href="#七、Map接口" class="headerlink" title="七、Map接口"></a>七、Map接口</h3><h4 id="各实现类的特点"><a href="#各实现类的特点" class="headerlink" title="各实现类的特点"></a><strong>各实现类的特点</strong></h4><p><strong>Map：</strong>双列数据，存儲key-value对的数格 类似于高中的函数：y=f(x）</p><p><strong>HashMap:</strong>作为Map的主要实现类：线程不安全的，效率高；可以存储null 的key和vaLue。<br>HashMap 的底层：数组+链表 （jdk7及之前）数组+ 链表+红黑树 (jdk 8)</p><p><strong>LinkedHashMap:</strong>保证在遍历map 元素时，可以按照添加的顺序实现遍历。<br>原因：在原有的HashNap底层结构基磁上，添加了一对指针，指向前一个和后一个元素。<br>对于频繁的遍历操作，此类执行效率高于HashMap。</p><p> <strong>TreeMap</strong>：保证按照添加的key-vaLue对进行排序，实现排序遍历，此时考虑key的自然排序和定制排序<br> ，底层使用红黑树</p><p><strong>Properties</strong>:常用来处理配置文件。key 和value都是String类型</p><p><strong>面试题：</strong></p><h5 id="1-HashMap的底层实现原理？（高频）"><a href="#1-HashMap的底层实现原理？（高频）" class="headerlink" title="1.HashMap的底层实现原理？（高频）"></a><strong>1.HashMap的底层实现原理？（高频）</strong></h5><p><code>以jdk7为例说明：</code></p><p>HashMap map = new HashMap();<br>在实例化以后，底层创建了长度是16的一维数组Entry[] table.<br>…可能已经执行过多次put…<br>map.put (key1, value1)：首先，调用key1所在类的hashCode()计算key1哈希值，此哈希值经过其种算法计算以后，得到在Entry数组中的存放位置。<br>如果此位置上的数据为空，此时的key1-value1添加成功。——<strong>情况1</strong><br>如果此位置上的数据不为空，（意味着此位置上存在一个或多个数据(以链表形式存在)，比较key1和己经存在的一个或多个數据<br>的哈希值：<br>如果key1的哈希值与已经存在的数据的哈希值都不相同，此时key1-value1添加成功。——<strong>情况2</strong><br>如果key1的哈希值和己经存在的某一个数据(key2-value2)的哈希值相同，继续比较：调用key1 所在类的equals(key2).<br>如果equals()返回false：此ikey1-value1 添加成功。—— <strong>情况3</strong><br>如果equals()返回true：使用value1替换value2。(put()不仅有添加的功能还有替换的功能)</p><p><code>补充：关于情况2和情况3：此的key1-value1 和原来的数据以链表的方式存储。</code></p><p><code>在不断的添加过程中，会涉及到扩容问题，默认的扩容方式：扩容为原来容量的2倍，并将原有的数据复制过来。</code></p><p><code>jdk8 相较于jdk7在底层实现方面的不同：</code><br>1.new HashMap()：底层没有创建一个长度为16的数组<br>2.jdk 8底层的效组是：Nodel].而非Entry[]<br>3.首次调用put(）方法时，底层创建长度为16的数组<br>4.jdk7底层结构只有：数组+链表。jdk8中底层结肉：数绍+链表+红票树。<br>    当数组的某一个索引位置上的元素以链表形式存在的数据个数＞8 且当前数組的长度＞64时，<br>    此时此索引位置上的所有数据改为便用红黑树存储。</p><p><strong>2.谈谈你对HashMap中put/get方法的认识？如果了解再谈谈HashMap的扩容机制？默认大小是多少？什么是负载因子(或填充比)？什么是吞吐临界值(或闵值、threshold)?</strong></p><p><strong>3.HashMap与Hashtable的异同？（低频）</strong></p><p><strong>4.CurrentHashMap与Hashtable的异同？（后续）</strong></p><h4 id="Map结构的理解"><a href="#Map结构的理解" class="headerlink" title="Map结构的理解"></a>Map结构的理解</h4><ul><li>Map中的key:无序的、不可重复的，使用Set存储所有的key；key 所在的类要重写equals() 和HashCode() ( 以HashMap为例）</li><li>Map中的value：无序的、可重复的，便用collection存储所有vaLue  —&gt;vaLue 所在的类要重写equals()</li><li>一个键值对：key-value组成了一个Entry 对象；</li><li>Map中的entry：无序的、不可重复的，使用Set存储所有的entry</li></ul><p><img src="/Users/yimoorua/Library/Application Support/typora-user-images/image-20220816194058635.png" alt="image-20220816194058635"> </p><h4 id="HashMap源码中的重要常量"><a href="#HashMap源码中的重要常量" class="headerlink" title="HashMap源码中的重要常量"></a>HashMap源码中的重要常量</h4><p><code>DEFAULT INITIAL CAPACITY:HashMap</code>的默认容量，16<br><code>MAXIMUM CAPACITY</code>HashMap的最大支持容量，2^30<br><code>DEFAULT LOAD FACTOR</code>: HashMap的默认加载因子<br><code>TREEIFY_ THRESHOLD</code>：Bucket中链表长度大于该默认值，转化为红黑树<br><code>UNTREEIFY THRESHOLD</code>：Bucket中红黑树存储的Node小于该默认值，转化为链表<br><code>MIN_TREEIFY_CAPACITY</code>：桶中的Node被树化时最小的hash表容量。（当桶中Node的数量大到需要变红黑树时，若hash表容量小于MIN_TREEIFY_CAPACITY时，此时应执行resize扩容操作这个MIN_TREEIFY_CAPACITY的值至少是TREEIFY_THRESHOLD的4倍。）<br><code>table</code>：存储元素的数组，总是2的n次幂<br><code>entrySet</code>：存储具体元素的集<br><code>size</code>：HashMap中存储的键值对的数量<br><code>modCount</code>: HashMap扩容和结构改变的次数。<br><code>threshold</code>：扩容的临界值，=容量*填充因子<br><code>loadFactor</code>：填充因子</p><h4 id="LinkedHashMap的底层实现原理（了解）"><a href="#LinkedHashMap的底层实现原理（了解）" class="headerlink" title="LinkedHashMap的底层实现原理（了解）"></a>LinkedHashMap的底层实现原理（了解）</h4><p>源码中：<br>static class Entry<K, V> extends HashMap. Node<K, V> {<br>Entry<K, V>  before, after;//能够记录添加的元素的先后顺序<br>Entry(int hash, K key, V value, Node<K, V> next) {<br>     super(hash, key, value, next)；<br>  }<br>}</p><h4 id="Map接口：常用方法"><a href="#Map接口：常用方法" class="headerlink" title="Map接口：常用方法"></a>Map接口：常用方法</h4><ul><li>添加、删除、修改操作：<br>Object put(Object key,Object value)：将指定key-value添加到(或修改）当前map对象中<br>void putAl(Map m):将m中的所有key-value对存放到当前map中<br>Object remove(Object key)：移除指定key的key-value对，并返回value<br>void clear：清空当前map中的所有数据</li><li>元素查询的操作：<br>Object get(Object key)：获取指定key对应的value<br>boolean containsKey(Object key)：是否包含指定的key<br>boolean contains Value(Object value)：是否包含指定的value<br>int size()：返回map中key-value对的个数<br>boolean isEmpty()：判断当前map是否为空<br>boolean equals(Object obj)：判断当前map和参数对象obj是否相等</li><li>元视图操作的方法：<br>Set keySet(：返回所有key构成的Set集合<br>Collection values()：返回所有value构成的Collection集合<br>Set entrySetl：返回所有key-value对构成的Set集合</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//遍历操作的几种方式</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Map</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">    hashMap.put(<span class="string">&quot;AA&quot;</span>, <span class="number">123</span>);</span><br><span class="line">    hashMap.put(<span class="number">45</span>, <span class="number">1234</span>);</span><br><span class="line">    hashMap.put(<span class="string">&quot;bb&quot;</span>, <span class="number">56</span>);</span><br><span class="line">    <span class="comment">//遍历所有的key集：keySet()</span></span><br><span class="line">    <span class="type">Set</span> <span class="variable">set</span> <span class="operator">=</span> hashMap.keySet();</span><br><span class="line">    <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> set.iterator();</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">        System.out.print(iterator.next() + <span class="string">&quot; &quot;</span>);<span class="comment">//AA bb 45</span></span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;\n*****************************&quot;</span>);</span><br><span class="line">    <span class="comment">//遍历所有的value集合:values()</span></span><br><span class="line">    <span class="type">Collection</span> <span class="variable">collection</span> <span class="operator">=</span> hashMap.values();</span><br><span class="line">    <span class="keyword">for</span> (Object obj : collection) &#123;</span><br><span class="line">        System.out.print(obj + <span class="string">&quot; &quot;</span>);<span class="comment">//123 56 1234</span></span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;\n*****************************&quot;</span>);</span><br><span class="line">    <span class="comment">//方式一：遍历所有的key-value:entrySet()</span></span><br><span class="line">    <span class="type">Set</span> <span class="variable">entrySet</span> <span class="operator">=</span> hashMap.entrySet();</span><br><span class="line">    <span class="type">Iterator</span> <span class="variable">iterator1</span> <span class="operator">=</span> entrySet.iterator();</span><br><span class="line">    <span class="keyword">while</span> (iterator1.hasNext()) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> iterator1.next();</span><br><span class="line">        <span class="comment">//entrySet集合中的元素都是entry</span></span><br><span class="line">        Map.<span class="type">Entry</span> <span class="variable">entry</span> <span class="operator">=</span> (Map.Entry) obj;</span><br><span class="line">        System.out.print(<span class="string">&quot;(&quot;</span> + entry.getKey() + <span class="string">&quot;,&quot;</span> + entry.getValue() + <span class="string">&quot;) &quot;</span>);</span><br><span class="line">      <span class="comment">//(AA,123) (bb,56) (45,1234)</span></span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;\n*****************************&quot;</span>);</span><br><span class="line">    <span class="comment">//方式二：遍历所有的key-value</span></span><br><span class="line">    <span class="type">Set</span> <span class="variable">keySet</span> <span class="operator">=</span> hashMap.keySet();</span><br><span class="line">    <span class="type">Iterator</span> <span class="variable">iterator2</span> <span class="operator">=</span> keySet.iterator();</span><br><span class="line">    <span class="keyword">while</span> (iterator2.hasNext()) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">key</span> <span class="operator">=</span> iterator2.next();<span class="comment">//key</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> hashMap.get(key);<span class="comment">//value</span></span><br><span class="line">        System.out.print(<span class="string">&quot;(&quot;</span> + key + <span class="string">&quot;,&quot;</span> + value + <span class="string">&quot;) &quot;</span>);<span class="comment">//(AA,123) (bb,56) (45,1234)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//向TreeMap中添加key-value，要求key必须是由同一个类创建的对象</span></span><br><span class="line">    <span class="comment">//因为要按照key进行排序：自然排序、定制排序</span></span><br><span class="line">    <span class="comment">//不能按照value排</span></span><br><span class="line">   <span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//按照姓名从大到小排列，年龄从小到大排列</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(o <span class="keyword">instanceof</span> User)&#123;</span><br><span class="line">            User user=(User)o;</span><br><span class="line">            <span class="type">int</span> compare=-<span class="built_in">this</span>.name.compareTo(user.name);</span><br><span class="line">            <span class="keyword">if</span>(compare !=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> compare;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> Integer.compare(<span class="built_in">this</span>.age,user.age);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;输入类型不匹配！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TreeMapTest</span><span class="params">()</span> &#123;  <span class="comment">//自然排序：按照名字大小排序</span></span><br><span class="line">        <span class="type">TreeMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeMap</span>();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;u1&quot;</span>, <span class="number">23</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;u2&quot;</span>, <span class="number">45</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;u3&quot;</span>, <span class="number">11</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;u4&quot;</span>, <span class="number">33</span>);</span><br><span class="line">        map.put(user1, <span class="number">98</span>);</span><br><span class="line">        map.put(user2, <span class="number">39</span>);</span><br><span class="line">        map.put(user3, <span class="number">76</span>);</span><br><span class="line">        map.put(user4, <span class="number">100</span>);</span><br><span class="line">        <span class="type">Set</span> <span class="variable">entrySet</span> <span class="operator">=</span> map.entrySet();</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> entrySet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            Map.<span class="type">Entry</span> <span class="variable">entry</span> <span class="operator">=</span> (Map.Entry) obj;</span><br><span class="line">            System.out.println(<span class="string">&quot;(&quot;</span> + entry.getKey() + <span class="string">&quot;,&quot;</span> + entry.getValue() + <span class="string">&quot;) &quot;</span>);</span><br><span class="line">            <span class="comment">//(User&#123;name=&#x27;u4&#x27;, age=33&#125;,100)</span></span><br><span class="line">            <span class="comment">// (User&#123;name=&#x27;u3&#x27;, age=11&#125;,76)</span></span><br><span class="line">            <span class="comment">// (User&#123;name=&#x27;u2&#x27;, age=45&#125;,39)</span></span><br><span class="line">            <span class="comment">// (User&#123;name=&#x27;u1&#x27;, age=23&#125;,98)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TreeMapTest1</span><span class="params">()</span> &#123; <span class="comment">//定制排序：按照年龄大小排序</span></span><br><span class="line">        <span class="type">TreeMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeMap</span>(<span class="keyword">new</span> <span class="title class_">Comparator</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(o1 <span class="keyword">instanceof</span> User &amp;&amp; o2 <span class="keyword">instanceof</span> User)&#123;</span><br><span class="line">                    User u1=(User)o1;</span><br><span class="line">                    User u2=(User)o2;</span><br><span class="line">                    <span class="keyword">return</span> Integer.compare(u1.getAge(),u2.getAge());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;输入的类型不匹配!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;u1&quot;</span>, <span class="number">23</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;u2&quot;</span>, <span class="number">45</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;u3&quot;</span>, <span class="number">11</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;u4&quot;</span>, <span class="number">33</span>);</span><br><span class="line">        map.put(user1, <span class="number">98</span>);</span><br><span class="line">        map.put(user2, <span class="number">39</span>);</span><br><span class="line">        map.put(user3, <span class="number">76</span>);</span><br><span class="line">        map.put(user4, <span class="number">100</span>);</span><br><span class="line">        Set entrySet=map.entrySet();</span><br><span class="line">        Iterator iterator=entrySet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            Object obj=iterator.next();</span><br><span class="line">            Map.Entry entry=(Map.Entry) obj;</span><br><span class="line">            System.out.println(<span class="string">&quot;(&quot;</span> + entry.getKey() + <span class="string">&quot;,&quot;</span> + entry.getValue() + <span class="string">&quot;) &quot;</span>);</span><br><span class="line"><span class="comment">//            (User&#123;name=&#x27;u3&#x27;, age=11&#125;,76)</span></span><br><span class="line"><span class="comment">//            (User&#123;name=&#x27;u1&#x27;, age=23&#125;,98)</span></span><br><span class="line"><span class="comment">//            (User&#123;name=&#x27;u4&#x27;, age=33&#125;,100)</span></span><br><span class="line"><span class="comment">//            (User&#123;name=&#x27;u2&#x27;, age=45&#125;,39)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h4><p>Map子类之五， Properties 类是 Hashtable 的子类，该对象用于处理属性文件<br> 由于属性文件里的 key、value 都是字符中类型，所以 Properties 里的 key和 value 都是字符串类型<br> 存取数据时，建议使用setProperty(String key,String value)方法和getProperty(String key)方法</p><blockquote><p>Properties pros = new Properties()；<br>pros. load (new FileInputStream(“jdbc.properties”));<br>String user=pros.getProperty(“user”)；<br>System.out.println(user);</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Properties:常用来处理配置文件。key和value都是String类型</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        fileInputStream = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">        properties.load(fileInputStream);<span class="comment">//加载流文件</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        System.out.println(name + <span class="string">&quot;:&quot;</span> + password);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(fileInputStream!=<span class="literal">null</span>) &#123;</span><br><span class="line">            fileInputStream.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="八、Collections工具类"><a href="#八、Collections工具类" class="headerlink" title="八、Collections工具类"></a>八、Collections工具类</h3><ul><li>操作数组的工具类：Arrays</li><li>Collections 是一个操作 Set、 List 和 Map 等集合的工具类</li><li>Collections 中提供了一系列静态的方法对集合元素进行排序、查询和修改等操作，还提供了对集合对象设置不可变、对朱合对象     实现同步控制等方法</li><li>排序操作：（均为static方法）</li></ul><blockquote><p>reverse(List)：反转 List 中元素的顺序<br>shuffle(List)：对 List 集合元素进行隨机排序<br>sort(List)：根据元素的自然顺序对指定 List 集合元素按升序排序<br>sort(List, Comparator)：根据指定的 Comparator 产生的顺序对 List 集合元素进行排序<br>swap(List, int, int)：将指定 list 集合中的i处元素和j处元素进行交换</p></blockquote><p><strong>面试题</strong></p><p><strong>Collection和Collections的区别：</strong></p><p>Collection是接口，Collections是操作Collection的工具类。</p><h4 id="Collections工具类的常用方法"><a href="#Collections工具类的常用方法" class="headerlink" title="Collections工具类的常用方法"></a>Collections工具类的常用方法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//    reverse(List)：反转List中元素的顺序</span><br><span class="line">//    shuffle(List)：对List集合元素进行随机排序</span><br><span class="line">//    sort(List)：跟据元素的自然顺序对指定 List 集合元素按升序排序</span><br><span class="line">//    sort(List, Comparator)：根据造定的 Comparator 产生的顺序对 List 集合元素进行排序</span><br><span class="line">//    swap(List, int i, int j)：将指定 List 集合中的i处元素和j处元素进行交换</span><br><span class="line">//    Object max(Collection)：根据元素的自然顺序，返回给定集合中的最大元素</span><br><span class="line">//    Object max(Collection, Comparator)：根据 Comparator 指定的顺序，返回给定集合中的最大值</span><br><span class="line">//    Object min(Collection)：根据元素的自然顺序，返回给定集合中的最小元素</span><br><span class="line">//    Object min(Collection, Comparator)：根据 Comparator 指定的顺序，返回给定集合中的最小值</span><br><span class="line">//    int frequency(Collection, Object)：返回指定集合中指定元素的出现次数</span><br><span class="line">//    void copy(List dest, List src): 将src 中的內容复制到dest中（注意）</span><br><span class="line"> @Test</span><br><span class="line">    public void test()&#123;</span><br><span class="line">        List list=new ArrayList();</span><br><span class="line">        list.add(123);</span><br><span class="line">        list.add(43);</span><br><span class="line">        list.add(765);</span><br><span class="line">        list.add(-97);</span><br><span class="line">        list.add(0);</span><br><span class="line">        //利用如下方法将dest集合撑开，</span><br><span class="line">        // 不然会报异常：IndexOutOfBoundsException(&quot;Source does not fit in dest&quot;)</span><br><span class="line">        List dest= Arrays.asList(new Object[list.size()]);</span><br><span class="line">        Collections.copy(dest,list);</span><br><span class="line">        System.out.println(dest);</span><br><span class="line">    &#125;</span><br><span class="line">//    boolean replaceALL(List list, Object oldVal, Object newVaL)：使用新值集合 List替换</span><br></pre></td></tr></table></figure><p><strong>Collections 常用方法：同步控制</strong><br>Collections 类中提供了多个 synchronizedXxx()方法，该方法可使将指定集合包装成线程同步的集合，从而可以解决多线程并发访问集合时的线程安全问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    List list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    list.add(<span class="number">123</span>);</span><br><span class="line">    list.add(<span class="number">43</span>);</span><br><span class="line">    list.add(<span class="number">765</span>);</span><br><span class="line">    list.add(-<span class="number">97</span>);</span><br><span class="line">    list.add(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//返回list1即为线程安全的集合</span></span><br><span class="line">    List list1=Collections.synchronizedList(list);</span><br><span class="line">    System.out.println(list1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java SE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java SE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156.html"/>
      <url>/posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><hr><script type="math/tex; mode=display">\Gamma(z)=\int_0^\infty t^{z-1}e^{-t}dt.</script><hr><div class="table-container"><table><thead><tr><th>项目标号</th><th>资金</th><th>备注</th></tr></thead><tbody><tr><td>1</td><td>100，000</td><td>无</td></tr><tr><td>2</td><td>200，000</td><td>无</td></tr><tr><td>3</td><td>300,600</td><td>重要</td></tr></tbody></table></div><hr><h2 id=""><a href="#" class="headerlink" title=""></a><u>文本内容</u></h2><div class="audio"><audio controls preload><source src='音频链接' type='audio/mp3'>Your browser does not support the audio tag.</audio></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis学习笔记</title>
      <link href="/posts/7fd48667.html"/>
      <url>/posts/7fd48667.html</url>
      
        <content type="html"><![CDATA[<h1 id="尚硅谷版Mybatis学习笔记"><a href="#尚硅谷版Mybatis学习笔记" class="headerlink" title="尚硅谷版Mybatis学习笔记"></a>尚硅谷版Mybatis学习笔记</h1><h2 id="一、Mybatis介绍"><a href="#一、Mybatis介绍" class="headerlink" title="一、Mybatis介绍"></a>一、Mybatis介绍</h2><h3 id="什么是Mybatis"><a href="#什么是Mybatis" class="headerlink" title="什么是Mybatis"></a>什么是Mybatis</h3><p>答：1、Mybatis是一个半ORM（对象关系映射）框架，它内部封装了JDBC，开发时只需要关注SQL语句本身，不需要花费精力去处理加载驱动、创建连接、创建statement等繁杂的过程。程序员直接编写原生态sql，可以严格控制sql执行性能，灵活度高。</p><p>2、MyBatis可以使用XML或注解来配置和映射原生信息，将POJO映射成数据库中的记录，避免了几乎所有的JDBC代码和手动设置参数以及获取结果集。</p><p>3、通过xml文件或注解的方式将要执行的各种statement配置起来，并通过java对象和statement中sql的动态参数进行映射生成最终执行的sql语句，最后由mybatis框架执行sql并将结果映射为java对象并返回。（从执行sql到返回result的过程）。</p><h3 id="Mybatis与Hibernate的区别"><a href="#Mybatis与Hibernate的区别" class="headerlink" title="Mybatis与Hibernate的区别"></a>Mybatis与Hibernate的区别</h3><p>答：1、Mybatis和hibernate不同，它不完全是一个ORM框架，因为MyBatis需要程序员自己编写Sql语句。</p><p>2、Mybatis直接编写原生态sql，可以严格控制sql执行性能，灵活度高，非常适合对关系数据模型要求不高的软件开发，因为这类软件需求变化频繁，一但需求变化要求迅速输出成果。但是灵活的前提是mybatis无法做到数据库无关性，如果需要实现支持多种数据库的软件，则需要自定义多套sql映射文件，工作量大。</p><p>3、Hibernate对象/关系映射能力强，数据库无关性好，对于关系模型要求高的软件，如果用hibernate开发可以节省很多代码，提高效率。</p><h3 id="为什么使用Mybatis"><a href="#为什么使用Mybatis" class="headerlink" title="为什么使用Mybatis"></a>为什么使用Mybatis</h3><p>答：1、基于SQL语句编程，相当灵活，不会对应用程序或者数据库的现有设计造成任何影响，SQL写在XML里，解除sql与程序代码的耦合，便于统一管理；提供XML标签，支持编写动态SQL语句，并可重用。</p><p>2、与JDBC相比，减少了50%以上的代码量，消除了JDBC大量冗余的代码，不需要手动开关连接；</p><p>3、很好的与各种数据库兼容（因为 MyBatis 使用 JDBC 来连接数据库，所以只要JDBC支持的数据库MyBatis都支持）。</p><p>4、能够与Spring很好的集成；</p><p>5、提供映射标签，支持对象与数据库的ORM字段关系映射；提供对象关系映射标签，支持对象关系组件维护。</p><h3 id="Mybatis下载地址"><a href="#Mybatis下载地址" class="headerlink" title="Mybatis下载地址"></a>Mybatis下载地址</h3><p>URL:Https://github.com/mybatis/mybatis-3</p><h2 id="二、Mybatis测试使用"><a href="#二、Mybatis测试使用" class="headerlink" title="二、Mybatis测试使用"></a>二、Mybatis测试使用</h2><h3 id="按官方文档简单使用Mybatis流程"><a href="#按官方文档简单使用Mybatis流程" class="headerlink" title="按官方文档简单使用Mybatis流程"></a>按官方文档简单使用Mybatis流程</h3><p>1.导入jar包：mybatis-3.4.1.jar &amp; mysql-connector-java.jar &amp; log4j.jar</p><p>2.创建与数据表字段名对应的实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Goods</span> &#123;</span><br><span class="line"><span class="keyword">private</span> Integer goodsId;</span><br><span class="line"><span class="keyword">private</span> String title;</span><br><span class="line"><span class="keyword">private</span> String subTitle;</span><br><span class="line"><span class="keyword">private</span> Float originalCost;</span><br><span class="line"><span class="keyword">private</span> Float currentPrice;</span><br><span class="line"><span class="keyword">private</span> Float discount;</span><br><span class="line"><span class="keyword">private</span> Integer isFreeDelivery;</span><br><span class="line"><span class="keyword">private</span> Integer categoryId;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.创建全局配置文件Mybatis-Config.xml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;environments default=&quot;development&quot;&gt;</span><br><span class="line">        &lt;environment id=&quot;development&quot;&gt;</span><br><span class="line">            &lt;transactionManager type=&quot;JDBC&quot;/&gt;</span><br><span class="line">            &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/babytun?useUnicode=true&amp;amp;characterEncoding=utf-8&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;password&quot; value=&quot;1234567890&quot;/&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;!-- 将我们写好的sql映射文件（GoodsMapper.xml）一定要注册到全局配置文件（Mybatis-Config.xml）中 --&gt;</span><br><span class="line">        &lt;mapper resource=&quot;Mapper/GoodsMapper.xml&quot;/&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p>4.创建Mapper映射文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.imooc.POJO.GoodsMapper&quot;&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">     接口式编程：</span><br><span class="line">     namespace:名称空间;指定为接口的全类名</span><br><span class="line">     id：唯一标识</span><br><span class="line">     resultType：返回值类型</span><br><span class="line">     #&#123;id&#125;：从传递过来的参数中取出id值</span><br><span class="line">--&gt;</span><br><span class="line">    &lt;select id=&quot;selectGoods&quot; resultType=&quot;com.imooc.POJO.Goods&quot;&gt;</span><br><span class="line">        select goods_id goodsId,title title,sub_title subTitle,original_cost originalCost,current_price currentPrice,discount discount,is_free_delivery isFreeDelivery,category_id categoryId</span><br><span class="line">        from t_goods</span><br><span class="line">        where goods_id = #&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><p>4.创建测试类（1.Mapper命名空间+id值；2.接口式编程（推荐））</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、接口式编程</span></span><br><span class="line"><span class="comment"> *     原生：       Dao       ====&gt;  DaoImpl</span></span><br><span class="line"><span class="comment"> *     mybatis：   Mapper ====&gt;  xxMapper.xml</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 2、SqlSession代表和数据库的一次会话；用完必须关闭；</span></span><br><span class="line"><span class="comment"> * 3、SqlSession和connection一样她都是非线程安全。每次使用都应该去获取新的对象。</span></span><br><span class="line"><span class="comment"> * 4、mapper接口没有实现类，但是mybatis会为这个接口生成一个代理对象。</span></span><br><span class="line"><span class="comment"> *        （将接口和xml进行绑定）</span></span><br><span class="line"><span class="comment"> *        EmployeeMapper empMapper = sqlSession.getMapper(EmployeeMapper.class);</span></span><br><span class="line"><span class="comment"> * 5、两个重要的配置文件：</span></span><br><span class="line"><span class="comment"> *        mybatis的全局配置文件：包含数据库连接池信息，事务管理器信息等...系统运行环境信息</span></span><br><span class="line"><span class="comment"> *        sql映射文件：保存了每一个sql语句的映射信息：</span></span><br><span class="line"><span class="comment"> *                 将sql抽取出来。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Yimoo</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">mybatisTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactory <span class="title function_">getSqlSessionFactory</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        String resource=<span class="string">&quot;Mybatis-Config.xml&quot;</span>;</span><br><span class="line">        InputStream inputStream=Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1、根据xml配置文件（全局配置文件）创建一个SqlSessionFactory对象 有数据源一些运行环境信息</span></span><br><span class="line"><span class="comment">     * 2、sql映射文件；配置了每一个sql，以及sql的封装规则等。</span></span><br><span class="line"><span class="comment">     * 3、将sql映射文件注册在全局配置文件中</span></span><br><span class="line"><span class="comment">     * 4、写代码：</span></span><br><span class="line"><span class="comment">     *        1）、根据全局配置文件得到SqlSessionFactory；</span></span><br><span class="line"><span class="comment">     *        2）、使用sqlSession工厂，获取到sqlSession对象使用他来执行增删改查</span></span><br><span class="line"><span class="comment">     *           一个sqlSession就是代表和数据库的一次会话，用完关闭</span></span><br><span class="line"><span class="comment">     *        3）、使用sql的唯一标志来告诉MyBatis执行哪个sql。sql都是保存在sql映射文件中的。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">demo1</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 2、获取sqlSession实例，能直接执行已经映射的sql语句</span></span><br><span class="line">        <span class="comment">// sql的唯一标识：statement Unique identifier matching the statement to use.</span></span><br><span class="line">        <span class="comment">// 执行sql要用的参数：parameter A parameter object to pass to the statement.</span></span><br><span class="line">        SqlSessionFactory sqlSessionFactory=getSqlSessionFactory();</span><br><span class="line">        SqlSession sqlSession=sqlSessionFactory.openSession();</span><br><span class="line">         <span class="keyword">try</span>&#123;</span><br><span class="line">             Goods goods=sqlSession.selectOne(<span class="string">&quot;com.imooc.POJO.GoodsMapper.selectGoods&quot;</span>,<span class="number">800</span>);</span><br><span class="line">             System.out.println(goods);</span><br><span class="line">         &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">             sqlSession.close();</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">demo2</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        SqlSessionFactory sqlSessionFactory=getSqlSessionFactory();</span><br><span class="line">        SqlSession sqlSession=sqlSessionFactory.openSession();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 3、获取接口的实现类对象</span></span><br><span class="line">            <span class="comment">//会为接口自动的创建一个代理对象，代理对象去执行增删改查方法</span></span><br><span class="line">            GoodsMapper goodsMapper=sqlSession.getMapper(GoodsMapper.class);</span><br><span class="line">            Goods goods=goodsMapper.selectGoods(<span class="number">900</span>);</span><br><span class="line">            System.out.println(goods);</span><br><span class="line">          <span class="comment">//输出：Goods&#123;goodsId=900, title=&#x27;三星 2016版 Galaxy On7（G6100）全网通4G 3GB+32G 钛岩黑 手机&#x27;,          subTitle=&#x27;美囤自营，品质保证！5.5英寸屏，3GB+32GB，双账户应用工作生活两不误！&#x27;, originalCost=1799.0, currentPrice=1299.0, discount=0.722068, isFreeDelivery=1, categoryId=30&#125;</span></span><br><span class="line">            <span class="comment">//自动创建代理</span></span><br><span class="line">            System.out.println(goodsMapper.getClass());<span class="comment">//输出：class com.sun.proxy.$Proxy6</span></span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            sqlSession.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如何让实体类的属性名与数据库字段名一一对应"><a href="#如何让实体类的属性名与数据库字段名一一对应" class="headerlink" title="如何让实体类的属性名与数据库字段名一一对应"></a>如何让实体类的属性名与数据库字段名一一对应</h3><p>1.在mapper文件中sql语句处为字段名设置别名，别名为实体类的属性名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;selectGoods&quot;</span> resultType=<span class="string">&quot;com.imooc.POJO.Goods&quot;</span>&gt;</span><br><span class="line">    select goods_id goodsId,title title,sub_title subTitle,original_cost originalCost,current_price currentPrice,discount discount,is_free_delivery isFreeDelivery,category_id categoryId</span><br><span class="line">    from t_goods</span><br><span class="line">    <span class="type">where</span> <span class="variable">goods_id</span> <span class="operator">=</span> #&#123;id&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>2.在全局配置文件中配置mapUndertocamleCase=true，前提是必须属性名与字段名为驼峰命名关系</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderScoretoCamleCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三、全局配置文件的标签"><a href="#三、全局配置文件的标签" class="headerlink" title="三、全局配置文件的标签"></a>三、全局配置文件的标签</h2><p>configuration <a href="/Users/yimoorua/Downloads/mybatis-3.5.9/mybatis-3.5.9.pdf">mybatis-3.5.9.pdf官方文档</a> </p><p>• properties<br>• settings<br>• typeAliases<br>• typeHandlers<br>• objectFactory（了解）<br>• plugins<br>• environments<br>      • environment<br>           • transactionManager<br>               • dataSource<br>               • databaseIdProvider<br>• mappers</p><h3 id="properties属性（属性文件）"><a href="#properties属性（属性文件）" class="headerlink" title="properties属性（属性文件）"></a>properties属性（属性文件）</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">1、mybatis可以使用properties来引入外部properties配置文件的内容；</span></span><br><span class="line"><span class="comment">resource：引入类路径下的资源</span></span><br><span class="line"><span class="comment">url：引入网络路径或者磁盘路径下的资源</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;dbconfig.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>dbconfig.properties文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://localhost:3306/babytun?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=1234567890</span><br><span class="line"></span><br><span class="line">orcl.driver=oracle.jdbc.OracleDriver</span><br><span class="line">orcl.url=jdbc:oracle:thin:@localhost:1521:orcl</span><br><span class="line">orcl.username=scott</span><br><span class="line">orcl.password=123456</span><br></pre></td></tr></table></figure></p><p>修改environment标签下的properties的value值<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="settings设置（自动开启驼峰命名规则）"><a href="#settings设置（自动开启驼峰命名规则）" class="headerlink" title="settings设置（自动开启驼峰命名规则）"></a>settings设置（自动开启驼峰命名规则）</h3><p>这是Mybatis中极为重要的调整设置，它们会改变Mybatis的运行时行为</p><p>mapUnderscoreToCamelCase：是否开启自动驼峰命名规则映射，即从经典数据库列名A_COLUMN到经典Java属性名aColumn的类似映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="typeAliases别名处理器（java类型起别名）"><a href="#typeAliases别名处理器（java类型起别名）" class="headerlink" title="typeAliases别名处理器（java类型起别名）"></a>typeAliases别名处理器（java类型起别名）</h3><p>类型别名是为Java类型设置一个短的名字，方便我们引用某个类</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.imooc.POJO.Goods&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;goods&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>类很多的情况下，可以批量设置这个包下的每一个类创建一个默认的别名，就是简单类名小写。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        别名不区分大小写--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.imooc.POJO&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以使用注解@Alias注解为其指定一个别名（注意只有使用批量起别名时，才可以使用注解起别名）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        别名不区分大小写--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.imooc.POJO&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Alias(&quot;goods&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Goods</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MyBatis已经为许多常见的 Java 类型内建了相应的类型别名。它们都是大小写不敏感的，我们在起别名的时候千万不要占用已有的别名</p><div class="table-container"><table><thead><tr><th style="text-align:center">别名</th><th style="text-align:center">映射的类型</th><th style="text-align:center">别名</th><th style="text-align:center">映射的类型</th><th style="text-align:center">别名</th><th style="text-align:center">映射的类型</th></tr></thead><tbody><tr><td style="text-align:center">_byte</td><td style="text-align:center">byte</td><td style="text-align:center">string</td><td style="text-align:center">String</td><td style="text-align:center">date</td><td style="text-align:center">Date</td></tr><tr><td style="text-align:center">_long</td><td style="text-align:center">long</td><td style="text-align:center">byte</td><td style="text-align:center">Byte</td><td style="text-align:center">decimal</td><td style="text-align:center">BigDecimal</td></tr><tr><td style="text-align:center">_short</td><td style="text-align:center">short</td><td style="text-align:center">long</td><td style="text-align:center">Long</td><td style="text-align:center">bigdecimal</td><td style="text-align:center">BigDecimal</td></tr><tr><td style="text-align:center">_int</td><td style="text-align:center">int</td><td style="text-align:center">short</td><td style="text-align:center">Short</td><td style="text-align:center">object</td><td style="text-align:center">Object</td></tr><tr><td style="text-align:center">_integer</td><td style="text-align:center">int</td><td style="text-align:center">int</td><td style="text-align:center">Integer</td><td style="text-align:center">map</td><td style="text-align:center">Map</td></tr><tr><td style="text-align:center">_double</td><td style="text-align:center">double</td><td style="text-align:center">double</td><td style="text-align:center">Double</td><td style="text-align:center">hashmap</td><td style="text-align:center">HashMap</td></tr><tr><td style="text-align:center">_float</td><td style="text-align:center">float</td><td style="text-align:center">float</td><td style="text-align:center">Float</td><td style="text-align:center">list</td><td style="text-align:center">List</td></tr><tr><td style="text-align:center">_boolean</td><td style="text-align:center">boolean</td><td style="text-align:center">boolean</td><td style="text-align:center">Boolean</td><td style="text-align:center">arraylist</td><td style="text-align:center">ArrayList</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">collection</td><td style="text-align:center">Collection</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">iterator</td><td style="text-align:center">Iterator</td></tr></tbody></table></div><h3 id="typeHandlers类型处理器"><a href="#typeHandlers类型处理器" class="headerlink" title="typeHandlers类型处理器"></a>typeHandlers类型处理器</h3><p>无论是 MyBatis 在预处理语句（PreparedStatement）中设置一个参数时，还是从结果集中取出一个值时， 都会用类型处理器将获取的值以合适的方式转换成 Java 类型。</p><div class="table-container"><table><thead><tr><th>类型处理器</th><th>Java 类型</th><th>JDBC 类型</th></tr></thead><tbody><tr><td>BooleanTypeHandler</td><td>java.lang.Boolean, boolean</td><td>数据库兼容的 BOOLEAN</td></tr><tr><td>ByteTypeHandler</td><td>java.lang.Byte, byte</td><td>数据库兼容的 NUMERIC 或 BYTE</td></tr><tr><td>ShortTypeHandler</td><td>java.lang.Short, short</td><td>数据库兼容的 NUMERIC 或 SHORT INTEGER</td></tr><tr><td>IntegerTypeHandler</td><td>java.lang.Integer, int</td><td>数据库兼容的 NUMERIC 或 INTEGER</td></tr><tr><td>LongTypeHandler</td><td>java.lang.Long, long</td><td>数据库兼容的 NUMERIC 或 LONG INTEGER</td></tr><tr><td>FloatTypeHandler</td><td>java.lang.Float, float</td><td>数据库兼容的 NUMERIC 或 FLOAT</td></tr><tr><td>DoubleTypeHandler</td><td>java.lang.Double, double</td><td>数据库兼容的 NUMERIC 或 DOUBLE</td></tr><tr><td>BigDecimalTypeHandler</td><td>java.math.BigDecimal</td><td>数据库兼容的 NUMERIC 或 DECIMAL</td></tr><tr><td>StringTypeHandler</td><td>java.lang.String</td><td>CHAR, VARCHAR</td></tr></tbody></table></div><p><strong>日期类型的处理</strong><br>1、日期和时间的处理，JDK1.8以前一直是个头疼的问题。我们通常使用JSR310规范领导者Stephen Colebourne<br>创建的Joda-Time来操作。1.8已经实现全部的JSR310规范了。<br>2、日期时间处理上，我们可以使用MyBatis基于JSR310（Date and Time API）编写的各种日期时间类型处理器。<br>3、MyBatis3.4以前的版本需要我们手动注册这些处理器，以后的版本都是自动注册的。</p><p><strong>自定义类型处理器</strong><br>我们可以重写类型处理器或创建自己的类型处理<br>器来处理不支持的或非标准的类型。<br>步骤：<br>1）、实现org.apache.ibatis.type.TypeHandler接口或者继承org.apache.ibatis.type.BaseTypeHandler<br>2）、指定其映射某个JDBC类型（可选操作）<br>3）、在mybatis全局配置文件中注册</p><h3 id="plugins插件（先学习Mybatis工作原理才能理解）"><a href="#plugins插件（先学习Mybatis工作原理才能理解）" class="headerlink" title="plugins插件（先学习Mybatis工作原理才能理解）"></a>plugins插件（先学习Mybatis工作原理才能理解）</h3><p>插件是MyBatis提供的一个非常强大的机制，我们可以通过插件来修改MyBatis的一些核心行为。插件通过动态代理机制，可以介入四大对象的任何一个方法的执行。后面会有专门的章节我们来介绍mybatis运行原理以及插件</p><p><strong>四大对象</strong></p><p>• <strong>Executor</strong> (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)</p><p>• <strong>ParameterHandler</strong> (getParameterObject, setParameters) </p><p>• <strong>ResultSetHandler</strong> (handleResultSets, handleOutputParameters) </p><p>• <strong>StatementHandler</strong> (prepare, parameterize, batch, update, query) </p><h3 id="environments环境"><a href="#environments环境" class="headerlink" title="environments环境"></a>environments环境</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure><p>1、<code>&lt;environments default=&quot;&quot;/&gt;</code></p><p>• MyBatis可以配置多种环境，比如开发、测试和生产环境需要有不同的配置。 </p><p>• 每种环境使用一个environment标签进行配置并指定唯一标识符</p><p>• 可以通过environments标签中的default属性指定一个环境的标识符来快速的切换环境</p><p>2、<code>&lt;environment id=&quot;”&gt;&lt;transactionManager type=&quot;&quot;/&gt;&lt;dataSource type=&quot;&quot;&gt;&lt;/dataSource&gt;&lt;/environment&gt;</code></p><p>• id：指定当前环境的唯一标识</p><p>• transactionManager、和dataSource都必须有</p><p>3、<code>&lt;transactionManager type=&quot;JDBC|MANAGED|自定义&quot;&gt;</code></p><p>• JDBC：使用了 JDBC 的提交和回滚设置，依赖于从数据源得到的连接来管理事务范围。JdbcTransactionFactory</p><p>• MANAGED：不提交或回滚一个连接、让容器来管理事务的整个生命周期（比如 JEE 应用服务器的上下文）。 ManagedTransactionFactory</p><p>• 自定义：实现TransactionFactory接口，type=全类名/别名</p><p>4、<code>&lt;dataSource type=&quot;UPOOLED|POOLED|JNDI|自定义&quot;&gt;...&lt;/dataSource&gt;</code></p><p>• UNPOOLED：不使用连接池，UnpooledDataSourceFactory</p><p>• POOLED：使用连接池， PooledDataSourceFactory</p><p>• JNDI： 在EJB 或应用服务器这类容器中查找指定的数据源</p><p>• 自定义：实现DataSourceFactory接口，定义数据源的获取方式。</p><p>• 实际开发中我们使用Spring管理数据源，并进行事务控制的配置来覆盖上述配置</p><h3 id="databaseIdProvider环境（数据库的移植性）"><a href="#databaseIdProvider环境（数据库的移植性）" class="headerlink" title="databaseIdProvider环境（数据库的移植性）"></a>databaseIdProvider环境（数据库的移植性）</h3><p>MyBatis 可以根据不同的数据库厂商执行不同的语句。 </p><p>• Type： DB_VENDOR</p><p>– 使用MyBatis提供的VendorDatabaseIdProvider解析数据库厂商标识。也可以实现DatabaseIdProvider接口来自定义。 </p><p>• Property-name：数据库厂商标识</p><p>• Property-value：为标识起一个别名，方便SQL语句使用databaseId属性引用</p><p><strong>DB_VENDOR</strong></p><p>– 会通过 <strong>DatabaseMetaData#getDatabaseProductName()</strong> 返回的字符串进行设置。由于通常情况下这个字符串都非常长而且相同产品的不同版本会返回不同的值，所以最好通过设置属性别名来使其变短 </p><p>• MyBatis匹配规则如下：</p><p>1、如果没有配置databaseIdProvider标签，那么databaseId=null</p><p>2、如果配置了databaseIdProvider标签，使用标签配置的name去匹配数据库信息，匹配上设置databaseId=配置指定的值，否则依旧为null</p><p>3、如果databaseId不为null，他只会找到配置databaseId的sql语句</p><p>4、MyBatis 会加载不带 databaseId 属性和带有匹配当前数据库databaseId 属性的所有语句。如果同时找到带有 databaseId 和不带databaseId 的相同语句，则后者会被舍弃。</p><h3 id="mapper映射（将sql映射注册到全局配置中）"><a href="#mapper映射（将sql映射注册到全局配置中）" class="headerlink" title="mapper映射（将sql映射注册到全局配置中）"></a>mapper映射（将sql映射注册到全局配置中）</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--resource：引用类路径下的sql映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;Mapper/GoodsMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--url：引用网络路径或者磁盘路径下的sql映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">&quot;file://D://GoodsMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--class：引用（注册）接口</span></span><br><span class="line"><span class="comment">        1、有sql映射文件，映射文件名必须和接口同名，并且放在与接口同一目录下</span></span><br><span class="line"><span class="comment">        2、没有sql映射文件，所有sql都是利用注解写在接口上</span></span><br><span class="line"><span class="comment">        推荐：比较重要的DAO接口我们写sql映射文件</span></span><br><span class="line"><span class="comment">             不重要，简答的DAO接口为了快速开发可以使用注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.imooc.DAO.GoodsMapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--package：批量注解，自动扫描包下映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.imooc.DAO&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="四、Mybatis映射文件"><a href="#四、Mybatis映射文件" class="headerlink" title="四、Mybatis映射文件"></a>四、Mybatis映射文件</h2><p>映射文件指导着MyBatis如何进行数据库增删改查，有着非常重要的意义；</p><p>映射文件的元素，如下：</p><p>•cache –命名空间的二级缓存配置<br>•cache-ref – 其他命名空间缓存配置的引用。<br>•resultMap – 自定义结果集映射<br>•parameterMap – 已废弃！老式风格的参数映射<br>•sql –抽取可重用语句块。<br>•insert – 映射插入语句<br>•update – 映射更新语句<br>•delete – 映射删除语句<br>•select – 映射查询语句</p><h3 id="insert、update、delete元素"><a href="#insert、update、delete元素" class="headerlink" title="insert、update、delete元素"></a>insert、update、delete元素</h3><p>测试增删改</p><p>1、parameterType：参数类型，可以省略</p><p>2、mybatis允许增删改直接定义以下类型返回值</p><p>Integer、long、Boolean、void</p><p>3、需要手动提交commit</p><p>手动提交：sqlSessionFactory,openSession();</p><p>自动提交：sqlSessionFactory.openSession(true);</p><h3 id="主键生成方式"><a href="#主键生成方式" class="headerlink" title="主键生成方式"></a>主键生成方式</h3><p>1、mysql支持自增主键，自增主键值的获取，mybatis是利用statement.getGenreatedKeys()；</p><p><strong>useGeneratedKeys=”true”</strong>：使用自增主键获取主键值策略</p><p>keyProperty：指定对应的主键属性（对应的JavaBean的属性名），也就是mybatis获取到主键值以后，将这个值封装给javaBean的对应的属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertGoods&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;goodsId&quot;</span> <span class="attr">databaseId</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">    insert into t_goods(title,sub_title,original_cost,current_price,discount,is_free_delivery,category_id)</span><br><span class="line">    values (#&#123;title&#125;,#&#123;subTitle&#125;,#&#123;originalCost&#125;,#&#123;currentPrice&#125;,#&#123;discount&#125;,#&#123;isFreeDelivery&#125;,#&#123;categoryId&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 2、oracle不支持自增主键，它使用的是序列来模拟自增，每次插入数据的主键是从序列中拿到的值。</p><p>获取主键值可以使用 <strong>selectKey</strong> 子元素：selectKey 元素将会首先运行，id 会被设置，然后插入语句会被调用</p><p>Order=”BEFORE”：当前sql在插入sql之前运行</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertEmployee&quot;</span> <span class="attr">databaseId</span>=<span class="string">&quot;oracle&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">order</span>=<span class="string">&quot;BEFORE&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Integer&quot;</span>&gt;</span></span><br><span class="line">        select EMPLOYEES_SEQ.nextval from dual</span><br><span class="line">    <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">    insert into employee(EMPLOYEE_ID,LAST_NAME,EMAIL)</span><br><span class="line">    values (#&#123;id&#125;,#&#123;lastName&#125;,#&#123;email&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>执行流程：</strong></p><p>先运行selectKey查询id的sql，查出id值封装给javaBean的id属性</p><p>在运行插入的sql；就可以取出id属性对应的值</p><p>selectKey标签中各属性的作用：</p><h3 id="参数处理"><a href="#参数处理" class="headerlink" title="参数处理"></a>参数处理</h3><p>1、单参数：没有限制，通过接口方法直接传参<br>2、多个参数：mybatis会做特殊处理，多个参数被封装成一个map<br>三种方法：<br>• 使用#{param1},#{param2}…</p><p>• （命名参数）在接口方法参数前指定(@Param(“属性名”) Object 属性名,@Param(“属性名”) Object 属性名…)<br>多个参数会封装成map，key==》@param(“属性名”)，value ==》方法参数值</p><p>• 如果多个参数正好是我们逻辑业务的数据模型，我们可以直接传入POJO</p><h1 id="属性名-：取出传入的POJO的属性值"><a href="#属性名-：取出传入的POJO的属性值" class="headerlink" title="{属性名}：取出传入的POJO的属性值"></a>{属性名}：取出传入的POJO的属性值</h1><p>• 如果多个参数不是业务模型中的数据，没有对应的POJO，不经常使用为了方便，也可以传入map</p><h1 id="key-：取出map中对应的值"><a href="#key-：取出map中对应的值" class="headerlink" title="{key}：取出map中对应的值"></a>{key}：取出map中对应的值</h1><p>如果多个参数不是业务模型中的数据，但经常使用，推荐来编写一个TO（Transfer Object）数据传输</p><p> Page{<br>Int index;<br>int size;<br>}</p><p>========================思考================================<br>public Employee getEmp(@Param(“id”)Integer id,String lastName);<br>    取值：id==&gt;#{id/param1}   lastName==&gt;#{param2}</p><p>public Employee getEmp(Integer id,@Param(“e”)Employee emp);<br>    取值：id==&gt;#{param1}    lastName===&gt;#{param2.lastName/e.lastName}</p><h2 id="特别注意：如果是Collection（List、Set）类型或者是数组，"><a href="#特别注意：如果是Collection（List、Set）类型或者是数组，" class="headerlink" title="特别注意：如果是Collection（List、Set）类型或者是数组，"></a>特别注意：如果是Collection（List、Set）类型或者是数组，</h2><pre><code>     也会特殊处理。也是把传入的list或者数组封装在map中。        key：Collection（collection）,如果是List还可以使用这个key(list)            数组(array)</code></pre><p>public Employee getEmpById(List<Integer> ids);<br>    取值：取出第一个id的值：   #{list[0]}</p><p>========================结合源码，mybatis怎么处理参数======================<br>**总结：参数多时会封装map，为了不混乱，我们可以使用@Param来指定封装时使用的key；</p><h1 id="key-就可以取出map中的值；"><a href="#key-就可以取出map中的值；" class="headerlink" title="{key}就可以取出map中的值；**"></a>{key}就可以取出map中的值；**</h1><p>(@Param(“id”)Integer id,@Param(“lastName”)String lastName);<br>ParamNameResolver解析参数封装map的；<br>//1、names：{0=id, 1=lastName}；构造器的时候就确定好了<br>      1.获取每个标了param注解的参数的@param的值：id，lastName，赋值给name;<br>      2.每次解析一个参数给map中保存信息：（key：参数索引，value：name的值）<br>                name的值：<br>                   标注了param注解：注解的值<br>                    没有标注：<br>                        1.全局配置：useActualParamName（jdk1.8）：name=参数名<br>                        2.name=map.size();相当于当前的元素的索引<br>                        {0=id,1=lastName,2=2}</p><h3 id="与-的区别"><a href="#与-的区别" class="headerlink" title="#{}与${}的区别"></a>#{}与${}的区别</h3><p>相同点：<br>都可以获取map中的值或者pojo对象的属性的值</p><p>不同点：<br>1.取值：#{}会用占位符预编译PreparedStatement到SQL中，${}会用字符串拼接SQL<br>2.安全性：#{}能预防SQL注入</p><p>${}的用处：原生jdbc不支持占位符的地方我们就可以使用${}进行取值<br>比如分表、排序…：按照年份分表拆分<br>             select <em> from ${year}_salary where xxx;<br>             select </em>  from tbl_employee order by ${f_name} ${order}</p><p><strong>#{}其他用法：</strong><br>   规定一些参数的规则：<br>   javaType、==jdbctype==、mode（存储过程）、numericScale、resultType、typeHandler、jdbcTypeName、expression（未来准备支持的功能）</p><p>   jdbcType通常需要在某种特定的条件下被设置：<br>   在我们数据为null的时候，有些数据库可能不能被识别mybatis对null的默认处理。比如Oracle（报错）；<br>   JdbcType OTHER：无效的类型；因为mybatis对所有的null都映射的是原生Jdbc的OTHER类型，orcal不认识<br>   由于全局配置：jdbcTypeForNull=OTHER；oracle不支持；两种解决办法：<br>   1、在对应sql参数中书写#{email,jdbcType=OTHER}<br>   2、在全局配置中设置<br>      <settings><br>         <setting name="jdbcTypeForNull" value="NULL"/>      </settings></p><h3 id="select元素"><a href="#select元素" class="headerlink" title="select元素"></a>select元素</h3><p>Select元素来定义查询操作。</p><p>• Id：唯一标识符。– 用来引用这条语句，需要和接口的方法名一致</p><p>• parameterType：参数类型。 – 可以不传，MyBatis会根据TypeHandler自动推断</p><p>• resultType：返回值类型。 – 别名或者全类名，如果返回的是集合，定义集合中元素的类型。不能和resultMap同时使用</p><p>1、List集合返回值的查询方法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public List<span class="tag">&lt;<span class="name">Goods</span>&gt;</span> getGoodsByTitleLike(String title);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpsByTitleLike&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.imooc.POJO.Goods&quot;</span>&gt;</span></span><br><span class="line">        select * from t_goods where title like #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>控制台输出内容：<br><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DEBUG 05-14 17:50:44,942 ==&gt;  Preparing: select * from t_goods where title like ?  (BaseJdbcLogger.java:137) </span><br><span class="line">DEBUG 05-14 17:50:44,967 ==&gt; Parameters: %分娩%(String)  (BaseJdbcLogger.java:137) </span><br><span class="line">DEBUG 05-14 17:50:44,985 &lt;==      Total: 2  (BaseJdbcLogger.java:137) </span><br><span class="line">北京和睦家医院自然分娩+无痛套餐（宝宝树专享，限定预产期2017年9月30日前）</span><br><span class="line">北京和睦家医院自然分娩+无痛套餐（宝宝树专享，限定预产期2017年9月30日前）</span><br></pre></td></tr></table></figure></p><p>2、Map集合返回值的查询方法：</p><p>a.单条记录封装</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public Map&lt;String,Object&gt; getGoodsByIdReturnMap(Integer goodsId);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getGoodsByIdReturnMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">        select * from t_goods where goods_id=#&#123;goodsId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DEBUG 05-14 17:52:51,885 ==&gt;  Preparing: select * from t_goods where goods_id=?  (BaseJdbcLogger.java:137) </span><br><span class="line">DEBUG 05-14 17:52:51,909 ==&gt; Parameters: 800(Integer)  (BaseJdbcLogger.java:137) </span><br><span class="line">DEBUG 05-14 17:52:51,926 &lt;==      Total: 1  (BaseJdbcLogger.java:137) </span><br><span class="line">&#123;original_cost=279.0, sub_title=德国原产 欧洲直邮 德国 Hipp喜宝 益生菌 奶粉, is_free_delivery=1, category_id=46, goods_id=800, discount=0.892473, current_price=249.0, title=喜宝HiPP 【欧洲直邮】德国Hipp喜宝益生菌奶粉2段 600g*2&#125;</span><br></pre></td></tr></table></figure><p>b.多条记录封装，map的键为记录的主键，map的值为记录的值<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@MapKey(&quot;goodsId&quot;) //告诉mybatis封装这个Map用哪个属性作为key</span><br><span class="line">  public Map&lt;Integer,Goods&gt; getGoodsByTitleLikeReturnMap(String title);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getGoodsByTitleLikeReturnMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.imooc.POJO.Goods&quot;</span>&gt;</span></span><br><span class="line">      select * from t_goods where title like #&#123;title&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><br>控制台输出内容：<br><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DEBUG 05-14 18:07:17,480 ==&gt;  Preparing: select * from t_goods where title like ?  (BaseJdbcLogger.java:137) </span><br><span class="line">DEBUG 05-14 18:07:17,508 ==&gt; Parameters: %分娩%(String)  (BaseJdbcLogger.java:137) </span><br><span class="line">DEBUG 05-14 18:07:17,525 &lt;==      Total: 2  (BaseJdbcLogger.java:137) </span><br><span class="line">&#123;</span><br><span class="line">752=Goods&#123;goodsId=752, title=&#x27;北京和睦家医院自然分娩+无痛套餐（宝宝树专享，限定预产期2017年9月30日前）&#x27;, subTitle=&#x27;24小时售前咨询电话：400-891-9191&#x27;, originalCost=76000.0, currentPrice=47880.0, discount=0.63, isFreeDelivery=1, categoryId=56&#125;, </span><br><span class="line">1264=Goods&#123;goodsId=1264, title=&#x27;北京和睦家医院自然分娩+无痛套餐（宝宝树专享，限定预产期2017年9月30日前）&#x27;, subTitle=&#x27;24小时售前咨询电话：400-891-9191&#x27;, originalCost=76000.0, currentPrice=47880.0, discount=0.63, isFreeDelivery=1, categoryId=46&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="resultType属性"><a href="#resultType属性" class="headerlink" title="resultType属性"></a>resultType属性</h4><p>1、全局setting设置</p><p>– autoMappingBehavior默认是PARTIAL，开启自动映射的功能。唯一的要求是列名和javaBean属性名一致</p><p>– 如果autoMappingBehavior设置为null则会取消自动映射</p><p>– 数据库字段命名规范，POJO属性符合驼峰命名法，如A_COLUMNaColumn，我们可以开启自动驼峰命名规则映射功能，mapUnderscoreToCamelCase=true。</p><p>2.自定义resultMap，实现高级结果集映射</p><p><strong>等效于resultType的实例如下：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//接口方法</span><br><span class="line">public Goods selectGoods(Integer id);</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--自定义某个javaBean的封装规则</span></span><br><span class="line"><span class="comment">     type：自定义规则--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;myGoods&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.imooc.POJO.Goods&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--column字段名，property属性名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;goods_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;goodsId&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;title&quot;</span> <span class="attr">property</span>=<span class="string">&quot;title&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sub_title&quot;</span> <span class="attr">property</span>=<span class="string">&quot;subTitle&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;original_cost&quot;</span> <span class="attr">property</span>=<span class="string">&quot;originalCost&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;current_price&quot;</span> <span class="attr">property</span>=<span class="string">&quot;currentPrice&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;discount&quot;</span> <span class="attr">property</span>=<span class="string">&quot;discount&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;is_free_delivery&quot;</span> <span class="attr">property</span>=<span class="string">&quot;isFreeDelivery&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;category_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;categoryId&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectGoods&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;myGoods&quot;</span>&gt;</span></span><br><span class="line">         select * from t_goods where goods_id=#&#123;goodsId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>控制台输出如下：（实现效果跟自动resultType=Goods自动封装一样，但支持高级自定）<br><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DEBUG 05-14 18:33:51,774 ==&gt;  Preparing: select * from t_goods where goods_id=?  (BaseJdbcLogger.java:137) </span><br><span class="line">DEBUG 05-14 18:33:51,807 ==&gt; Parameters: 800(Integer)  (BaseJdbcLogger.java:137) </span><br><span class="line">DEBUG 05-14 18:33:51,826 &lt;==      Total: 1  (BaseJdbcLogger.java:137) </span><br><span class="line">Goods&#123;goodsId=800, title=&#x27;喜宝HiPP 【欧洲直邮】德国Hipp喜宝益生菌奶粉2段 600g*2&#x27;, subTitle=&#x27;德国原产 欧洲直邮 德国 Hipp喜宝 益生菌 奶粉&#x27;, originalCost=279.0, currentPrice=249.0, discount=0.892473, isFreeDelivery=1, categoryId=46&#125;</span><br></pre></td></tr></table></figure></p><h4 id="association的三种使用方法"><a href="#association的三种使用方法" class="headerlink" title="association的三种使用方法"></a>association的三种使用方法</h4><p>1.result</p><p>2.分步查询</p><p>3.延迟加载属性</p><p>每次查询Goods对象时，总是把对应id的detail信息查询出来。使用lazyLoadingEnable属性我们想要在需要时在查询出来</p><p>lazyLoadingenabled：true，开启延迟加载，按需查询</p><p>aggressiveLazyLoading：false，开启按需查询，true，关闭按需查询，全部查询出来</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;aggressiveLazyLoading&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>4.多对一查询</p><p>用N的一方GoodsDetail查询Goods的信息</p><p>代码实例如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//GoodsMapper.xml</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectGoodsById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.imooc.POJO.Goods&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from t_goods</span><br><span class="line">        where goods_id = #&#123;goodsId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//GoodsDetailMapper.xml</span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;manyToOne&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.imooc.POJO.GoodsDetail&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;gd_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;gdId&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;goods&quot;</span> <span class="attr">column</span>=<span class="string">&quot;goods_id&quot;</span> <span class="attr">select</span>=<span class="string">&quot;com.imooc.DAO.GoodsMapper.selectGoodsById&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectGoodsByAsscoiation&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;manyToOne&quot;</span>&gt;</span></span><br><span class="line">    select * from t_goods_detail where goods_id=#&#123;goodsId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一对多查询（collection）</p><p>1的一方为Goods，n的一方为GoodsDetail，查询Goods的同时查询GoodsDetail对应id信息</p><p>代码实例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1：在Goods实体类里增加goodsDet</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Goods</span> &#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">private</span> List&lt;GoodsDetail&gt; goodsDetails;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//N</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GoodsDetail</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer gdId;</span><br><span class="line">    <span class="keyword">private</span> Integer godsId;</span><br><span class="line">    <span class="keyword">private</span> String gdPicUrl;</span><br><span class="line">    <span class="keyword">private</span> Integer gdOrder;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//GoodsMapper接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">GoodsMapper</span> &#123;</span><br><span class="line"><span class="keyword">public</span> List&lt;Goods&gt; <span class="title function_">getGoodsDetailByOneToMany</span><span class="params">(Integer goodsId)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//GoodsDetailMapper接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">GoodsDetailMapper</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;GoodsDetail&gt; <span class="title function_">selectDetailById</span><span class="params">(Integer gdId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;MyGoodsByOneToMany&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.imooc.POJO.Goods&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;goods_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;goodsId&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--可以省略其他result设定，前提是javabean属性名与字段名一一对应--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--association定义关联对象的封装规则</span></span><br><span class="line"><span class="comment">           select：表名当前属性是调用select指定的方法查出的结果</span></span><br><span class="line"><span class="comment">           column=&quot;指定将那一列的值传给这个方法&quot;</span></span><br><span class="line"><span class="comment">           使用select指定的方法传入column指定的参数值，并封装给property封装的值</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;goodsDetails&quot;</span> <span class="attr">select</span>=<span class="string">&quot;com.imooc.DAO.GoodsDetailMapper.selectDetailById&quot;</span> <span class="attr">column</span>=<span class="string">&quot;goods_id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getGoodsDetailByOneToMany&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;MyGoodsByOneToMany&quot;</span>&gt;</span></span><br><span class="line">        select * from t_goods where goods_id=#&#123;goodsId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--GoodsDetail的SQL查询方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectDetailById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.imooc.POJO.GoodsDetail&quot;</span>&gt;</span></span><br><span class="line">    select * from t_goods_detail where goods_id = #&#123;gdId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="五、动态SQL"><a href="#五、动态SQL" class="headerlink" title="五、动态SQL"></a>五、动态SQL</h2><ul><li>Mybatis框架的动态SQL技术是一种根据特定条件动态拼装SQL语句的功能，它存在的意义是为了解决拼接SQL语句字符串时的痛点问题</li></ul><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><ul><li>if标签可通过test属性（即传递过来的数据）的表达式进行判断，若表达式的结果为true，则标签中的内容会执行；反之标签中的内容不会执行</li><li>在where后面添加一个恒成立条件<code>1=1</code><ul><li>这个恒成立条件并不会影响查询的结果<ul><li>这个<code>1=1</code>可以用来拼接<code>and</code>语句，例如：当empName为null时</li><li>如果不加上恒成立条件，则SQL语句为<code>select * from t_emp where and age = ? and sex = ? and email = ?</code>，此时<code>where</code>会与<code>and</code>连用，SQL语句会报错<ul><li>如果加上一个恒成立条件，则SQL语句为<code>select * from t_emp where 1= 1 and age = ? and sex = ? and email = ?</code>，此时不报错</li></ul></li></ul></li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getEmpByCondition(Emp emp);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">select * from t_emp where 1=1</span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">and emp_name = #&#123;empName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">and age = #&#123;age&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null and sex !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">and sex = #&#123;sex&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email != null and email !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">and email = #&#123;email&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="where"><a href="#where" class="headerlink" title="where"></a>where</h2><ul><li>where和if一般结合使用：<ul><li>若where标签中的if条件都不满足，则where标签没有任何功能，即不会添加where关键字  <ul><li>若where标签中的if条件满足，则where标签会自动添加where关键字，并将条件最前方多余的and/or去掉  </li></ul></li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getEmpByCondition(Emp emp);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">select * from t_emp</span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">emp_name = #&#123;empName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">and age = #&#123;age&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null and sex !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">and sex = #&#123;sex&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email != null and email !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">and email = #&#123;email&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>注意：where标签不能去掉条件后多余的and/or</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--这种用法是错误的，只能去掉条件前面的and/or，条件后面的不行--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">emp_name = #&#123;empName&#125; and</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">age = #&#123;age&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h2><ul><li>trim用于去掉或添加标签中的内容  </li><li>常用属性<ul><li>prefix：在trim标签中的内容的前面添加某些内容  <ul><li>suffix：在trim标签中的内容的后面添加某些内容 </li><li>prefixOverrides：在trim标签中的内容的前面去掉某些内容  </li><li>suffixOverrides：在trim标签中的内容的后面去掉某些内容</li></ul></li></ul></li><li>若trim中的标签都不满足条件，则trim标签没有任何效果，也就是只剩下<code>select * from t_emp</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getEmpByCondition(Emp emp);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">select * from t_emp</span><br><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;where&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;and|or&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">emp_name = #&#123;empName&#125; and</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">age = #&#123;age&#125; and</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null and sex !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">sex = #&#123;sex&#125; or</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email != null and email !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">email = #&#123;email&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getEmpByCondition</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line"><span class="type">DynamicSQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(DynamicSQLMapper.class);</span><br><span class="line">List&lt;Emp&gt; emps= mapper.getEmpByCondition(<span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="literal">null</span>, <span class="string">&quot;张三&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>));</span><br><span class="line">System.out.println(emps);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="choose、when、otherwise"><a href="#choose、when、otherwise" class="headerlink" title="choose、when、otherwise"></a>choose、when、otherwise</h2><ul><li><code>choose、when、otherwise</code>相当于<code>if...else if..else</code></li><li>when至少要有一个，otherwise至多只有一个</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByChoose&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">select * from t_emp</span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">emp_name = #&#123;empName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">age = #&#123;age&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;sex != null and sex != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">sex = #&#123;sex&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;email != null and email != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">email = #&#123;email&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">did = 1</span><br><span class="line"><span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getEmpByChoose</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line"><span class="type">DynamicSQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(DynamicSQLMapper.class);</span><br><span class="line">List&lt;Emp&gt; emps = mapper.getEmpByChoose(<span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="literal">null</span>, <span class="string">&quot;张三&quot;</span>, <span class="number">23</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;123@qq.com&quot;</span>, <span class="literal">null</span>));</span><br><span class="line">System.out.println(emps);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>相当于<code>if a else if b else if c else d</code>，只会执行其中一个</li></ul><h2 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h2><ul><li>属性：  <ul><li>collection：设置要循环的数组或集合  <ul><li>item：表示集合或数组中的每一个数据  </li><li>separator：设置循环体之间的分隔符，分隔符前后默认有一个空格，如<code>,</code></li><li>open：设置foreach标签中的内容的开始符  </li><li>close：设置foreach标签中的内容的结束符</li></ul></li></ul></li><li><p>批量删除</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int deleteMoreByArray(Integer[] eids);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteMoreByArray&quot;</span>&gt;</span></span><br><span class="line">delete from t_emp where eid in</span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;eids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">#&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteMoreByArray</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line"><span class="type">DynamicSQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(DynamicSQLMapper.class);</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> mapper.deleteMoreByArray(<span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;);</span><br><span class="line">System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>批量添加</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int insertMoreByList(@Param(&quot;emps&quot;) List&lt;Emp&gt; emps);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertMoreByList&quot;</span>&gt;</span></span><br><span class="line">insert into t_emp values</span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">item</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">(null,#&#123;emp.empName&#125;,#&#123;emp.age&#125;,#&#123;emp.sex&#125;,#&#123;emp.email&#125;,null)</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertMoreByList</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line"><span class="type">DynamicSQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(DynamicSQLMapper.class);</span><br><span class="line"><span class="type">Emp</span> <span class="variable">emp1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="literal">null</span>,<span class="string">&quot;a&quot;</span>,<span class="number">1</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;123@321.com&quot;</span>,<span class="literal">null</span>);</span><br><span class="line"><span class="type">Emp</span> <span class="variable">emp2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="literal">null</span>,<span class="string">&quot;b&quot;</span>,<span class="number">1</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;123@321.com&quot;</span>,<span class="literal">null</span>);</span><br><span class="line"><span class="type">Emp</span> <span class="variable">emp3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="literal">null</span>,<span class="string">&quot;c&quot;</span>,<span class="number">1</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;123@321.com&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">List&lt;Emp&gt; emps = Arrays.asList(emp1, emp2, emp3);</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> mapper.insertMoreByList(emps);</span><br><span class="line">System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id=""><a href="#" class="headerlink" title=" "></a> </h2>]]></content>
      
      
      <categories>
          
          <category> Java framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两数之和</title>
      <link href="/posts/d98ef1d2.html"/>
      <url>/posts/d98ef1d2.html</url>
      
        <content type="html"><![CDATA[<h1 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h1><p>⭐️难度：简单</p><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> <em><code>target</code></em> 的那 <strong>两个</strong> 整数，并返回它们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。<br>你可以按任意顺序返回答案。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2,7,11,15], target = 9</span><br><span class="line">输出：[0,1]</span><br><span class="line">解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,2,4], target = 6</span><br><span class="line">输出：[1,2]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,3], target = 6</span><br><span class="line">输出：[0,1]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>2 &lt;= nums.length &lt;= 104</code></li><li><code>-109 &lt;= nums[i] &lt;= 109</code></li><li><code>-109 &lt;= target &lt;= 109</code></li><li><strong>只会存在一个有效答案</strong><br><strong>进阶：</strong>你可以想出一个时间复杂度小于 <code>O(n2)</code> 的算法吗？</li></ul><p>答案：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">           <span class="type">int</span> n=nums.length;</span><br><span class="line">           <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">               <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line">                   <span class="keyword">if</span>(nums[i]+nums[j]==target)&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;i,j&#125;;</span><br><span class="line">                        &#125;</span><br><span class="line">               &#125;</span><br><span class="line">          &#125;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回文数</title>
      <link href="/posts/df58b0a0.html"/>
      <url>/posts/df58b0a0.html</url>
      
        <content type="html"><![CDATA[<h1 id="回文数"><a href="#回文数" class="headerlink" title="回文数"></a>回文数</h1><p>⭐️难度：简单</p><p>给你一个整数 <code>x</code> ，如果 <code>x</code> 是一个回文整数，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p>回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p><p>例如，<code>121</code> 是回文，而 <code>123</code> 不是。</p><p><strong>示例 1：</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：x = 121</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><br><strong>示例 2：</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入： x = -121</span><br><span class="line">输出：false</span><br><span class="line">解释：从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。</span><br></pre></td></tr></table></figure><br><strong>示例 3：</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：x = 10</span><br><span class="line">输出：false</span><br><span class="line">解释：从右向左读, 为 01 。因此它不是一个回文数。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>-231 &lt;= x &lt;= 231 - 1</code></li></ul><p>进阶：你能不将整数转为字符串来解决这个问题吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="comment">// 特殊情况：</span></span><br><span class="line">        <span class="comment">// 如上所述，当 x &lt; 0 时，x 不是回文数。</span></span><br><span class="line">        <span class="comment">// 同样地，如果数字的最后一位是 0，为了使该数字为回文，</span></span><br><span class="line">        <span class="comment">// 则其第一位数字也应该是 0</span></span><br><span class="line">        <span class="comment">// 只有 0 满足这一属性</span></span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span> || (x % <span class="number">10</span> == <span class="number">0</span> &amp;&amp; x != <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">revertedNumber</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x &gt; revertedNumber) &#123;</span><br><span class="line">            revertedNumber = revertedNumber * <span class="number">10</span> + x % <span class="number">10</span>;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当数字长度为奇数时，我们可以通过 revertedNumber/10 去除处于中位的数字。</span></span><br><span class="line">        <span class="comment">// 例如，当输入为 12321 时，在 while 循环的末尾我们可以得到 x = 12，revertedNumber = 123，</span></span><br><span class="line">        <span class="comment">// 由于处于中位的数字不影响回文（它总是与自己相等），所以我们可以简单地将其去除。</span></span><br><span class="line">        <span class="keyword">return</span> x == revertedNumber || x == revertedNumber / <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>心情笔记</title>
      <link href="/posts/f4b4b970.html"/>
      <url>/posts/f4b4b970.html</url>
      
        <content type="html"><![CDATA[<p>xxxxxxxxxxxxxxxxx</p>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> notes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇文章</title>
      <link href="/posts/5c2fafc7.html"/>
      <url>/posts/5c2fafc7.html</url>
      
        <content type="html"><![CDATA[<h2 id="这是我第一篇文章"><a href="#这是我第一篇文章" class="headerlink" title="这是我第一篇文章"></a>这是我第一篇文章</h2><h3 id="练习一下博客"><a href="#练习一下博客" class="headerlink" title="练习一下博客"></a>练习一下博客</h3>]]></content>
      
      
      <categories>
          
          <category> Demo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Demo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>分页</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<!-- GitCalendar容器 --><div id="gitZone"></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/progress_bar.css"/>
      <url>/css/progress_bar.css</url>
      
        <content type="html"><![CDATA[.pace {    -webkit-pointer-events: none;    pointer-events: none;    -webkit-user-select: none;    -moz-user-select: none;    user-select: none;    z-index: 2000;    position: fixed;    margin: auto;    top: 4px;    left: 0;    right: 0;    height: 8px;    border-radius: 8px;    width: 7rem;    background: #eaecf2;    border: 1px #e3e8f7;    overflow: hidden}.pace-inactive .pace-progress {    opacity: 0;    transition: .3s ease-in}.pace .pace-progress {    -webkit-box-sizing: border-box;    -moz-box-sizing: border-box;    -ms-box-sizing: border-box;    -o-box-sizing: border-box;    box-sizing: border-box;    -webkit-transform: translate3d(0, 0, 0);    -moz-transform: translate3d(0, 0, 0);    -ms-transform: translate3d(0, 0, 0);    -o-transform: translate3d(0, 0, 0);    transform: translate3d(0, 0, 0);    max-width: 200px;    position: absolute;    z-index: 2000;    display: block;    top: 0;    right: 100%;    height: 100%;    width: 100%;    /* linear-gradient(to right, #3494e6, #ec6ead) */    background: linear-gradient(to right, #43cea2, #3866ca);    animation: gradient 2s ease infinite;    background-size: 200%}.pace.pace-inactive {    opacity: 0;    transition: .3s;    top: -8px}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/runtime.css"/>
      <url>/css/runtime.css</url>
      
        <content type="html"><![CDATA[div#runtime {  width: 180px;  margin: auto;  color: #fff;  padding-inline: 5px;  border-radius: 10px;  background-color: rgba(0, 0, 0, 0.7);}#workboard {  font-size: 12px;}[data-theme="dark"] div#runtime {  color: #28b4c8;  box-shadow: 0 0 5px rgba(28, 69, 218, 0.71);  animation: flashlight 1s linear infinite alternate;}@-moz-keyframes flashlight {  from {    box-shadow: 0 0 5px #1478d2;  }  to {    box-shadow: 0 0 2px #1478d2;  }}@-webkit-keyframes flashlight {  from {    box-shadow: 0 0 5px #1478d2;  }  to {    box-shadow: 0 0 2px #1478d2;  }}@-o-keyframes flashlight {  from {    box-shadow: 0 0 5px #1478d2;  }  to {    box-shadow: 0 0 2px #1478d2;  }}@keyframes flashlight {  from {    box-shadow: 0 0 5px #1478d2;  }  to {    box-shadow: 0 0 2px #1478d2;  }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/player.css"/>
      <url>/css/player.css</url>
      
        <content type="html"><![CDATA[/* 播放器大小 */.music-player {    width: 570px;    height: 500px;  }  .music-player h3{    margin: 0px 0 1px!important;  }  @font-face {font-family: "iconfont";    src: url('iconfont.eot?t=1537976418058'); /* IE9*/    src: url('iconfont.eot?t=1537976418058#iefix') format('embedded-opentype'), /* IE6-IE8 */    url('data:application/x-font-woff;charset=utf-8;base64,d09GRgABAAAAAAmcAAsAAAAADgwAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABHU1VCAAABCAAAADMAAABCsP6z7U9TLzIAAAE8AAAARAAAAFY8lGHxY21hcAAAAYAAAACUAAACBGvSDaxnbHlmAAACFAAABUMAAAbwatoOAWhlYWQAAAdYAAAALwAAADYSwtboaGhlYQAAB4gAAAAcAAAAJAfeA4tobXR4AAAHpAAAAA8AAAAoKAAAAGxvY2EAAAe0AAAAFgAAABYIpgZ4bWF4cAAAB8wAAAAdAAAAIAEYAGNuYW1lAAAH7AAAAUUAAAJtPlT+fXBvc3QAAAk0AAAAZQAAAJSspZ5ZeJxjYGRgYOBikGPQYWB0cfMJYeBgYGGAAJAMY05meiJQDMoDyrGAaQ4gZoOIAgCKIwNPAHicY2BkYWCcwMDKwMHUyXSGgYGhH0IzvmYwYuRgYGBiYGVmwAoC0lxTGByeyf3/z9zwv4EhhrmBoQEozAiSAwD0fA0ZeJztkcENwjAQBMdxCAQhQgU88qYeesBKGoh48aLSS7oIa1+QKIKzxtKedWdpF9gBUdxEDeFNINdL3VD6kWPp19ylzxyoaOxqvSUb57RM6wqbHr76p4Jm/Fx0oNGfUVtabdzrueFfp3I/N9VmPx25hfVOzsqSkzOzwZGX2Ojk2Tk5Oc9lcuR0x6OQE+lIBag+4Pgp1HicbVVrjBNVFJ5z796Zvu482plOH0tLZ9rp7hba0m5bZLuUhwZNQEB2F7airBDlERd5/IX4b+MPE3/wUhMTEkLEQAwkhpAIgcCaGI3xpyQqwb/orgsmGs129Ex3UWJoJufec+43PfN955wZgQjC37/SL6giGEKvIESgHjWNHBpNhnzOQAPOILCaH2psI9xP9BNQ4gNACqb7kBRi7lKVbnEvuU2YhhG4ADuUUOn0bUUpdl4e0JU7J9HAuFYEZ3bWveNOz8wI+PtfTj+ITr7G0GirwWQ1NBDVIWf4wcjRz9ylsQJxH5oFAgNxUEh/Au6r85cx3bTbdC/BdvdjRR84eQcNOV9UlNunSyHFvRAuut/PzEAThmdnMWcP5nxA99F9giZkhKIwJAhmEbyMjYoJKdBFCUQqg6mJUbPegLqDxCOWU29BPQWiAqL0pHO3UAGoFJZaRE2l0+nOo2w6IQPICS1K5CxYnTmj45Noj48FRMKknq8854Ou835PFJoVcrbSBN29rJXqpbB7RacbSJ/cmVD6CIRgs1HWYWuw82UwSBmlgQBl5DjuJyj1oyWLGn5Na7QhKEJaEMCWwdD0qFlFQqh3Dn1JS8Fjn/zeStp2spWwAWy3vDrprcmFhTZw2wl3jxJkduHoSd+rGcV8f9Cb1C/khPXCGGbEBHjZljNYb3hZ8Krm0amksXooER60wHQsUU+DjVI7MkTNFAyBJOrRCio5mIcqPmHUrKDYCMBH1qPkkfPuuolPnx+KxGKRofJHG9sfDq9s8oQtT4VCU7KV5E0i2wneXNn70nLZjgNf/3oJAUnLA8x/PmTvHOBqJA5y662a9yekxI6v3fUejediwN7ZOP42XcUzidAUz/KpUCLLV//EE1l5GNYUOCSzvPXsKm4lOB6HYC9dlw9Bb5YPbQCI5eKLOqDZT34RkqjEWk95SxIlz3j6D0Eam6mKa72hOdQpga1VReynRn3QsRRUoavHogRmtIIqEE44v+HfG+FKIrK/NhGLAeckLkmWOvrasWNkxyFg45KsSuNtSeViuy1yVWqPS6oskZ/95wIhVXUfRBKlrRHD39NLTvd2dskvjEAv2bzbnW6LGpfGxyWueTf+u+/Ow4/0IrVxHvqFljCKTLCeBSzrEvB4VKJpwKoUACuDI4mBegPfC0hSzDfEIvLDghc9CM5rCgxdNBejtf+iJs5E5x5HDcLxeLiq2fzenz7DX82VcXrsqt/wAZUjEfmKTwtSKdsH0JeTIKhJy1as0LuxTaMwuqkbGnkV4BVy91owBHHtejjGg9feZz4oZ6/bFZ/4XdAfnp8L+4M/MKJobMnW4rIXU6ImEzG7q/7M7m9wtjWxeXH3zvMtjAJ77uobb95YnKNb9BZdIzjCJkHIZbAfZawpVq4ILWRR7XJTIIN0a9jd0SUoEWTyDopS9URKgYIR7HA8bUEGZwLxljOM95KrLi8rQAzFp7LJAAlNMtWn6D7WD3NjB4mW0ugp14K5sroI8ZPggccQV912eAEysDwQUTQfmwj0BvYwBroicZanh0bGFE1TxiZPkE+eimBHxtpyOCxvP3qmO783uzzzwubu/Fqix0TKeBUbdPKW91rr0qlipZH+AmGHVeoelUYGu8PQvWHF0e2qY1uihL28wDjKNFsyGxo9q2jk4Jir9jOf3uUUhECXtoFfjjL8duQU1eavIOjwNph7DDoQJP5FkFp2VQ8D35a3qMNwDgmOHKJ5xiVFB8b2IMMJ5tOUSGA5PTGJCmwJy+2xI+ypCHLm6HY5fBTWrOrvd//Ccv8D5gQugwB4nGNgZGBgAOJ0oeli8fw2Xxm4WRhA4PrFk0kI+v9+FgbmDCCXg4EJJAoAItUKtAB4nGNgZGBgbvjfwBDDwgACQJKRARVwAQBHEAJzeJxjYWBgYCECAwADmAApAAAAAAAAOgB0ANwBFAGYAfwCgAL0A3gAAHicY2BkYGDgYghnYGEAASYwjwtI/gfzGQASMwF8AAAAeJxlj01OwzAQhV/6B6QSqqhgh+QFYgEo/RGrblhUavdddN+mTpsqiSPHrdQDcB6OwAk4AtyAO/BIJ5s2lsffvHljTwDc4Acejt8t95E9XDI7cg0XuBeuU38QbpBfhJto41W4Rf1N2MczpsJtdGF5g9e4YvaEd2EPHXwI13CNT+E69S/hBvlbuIk7/Aq30PHqwj7mXle4jUcv9sdWL5xeqeVBxaHJIpM5v4KZXu+Sha3S6pxrW8QmU4OgX0lTnWlb3VPs10PnIhVZk6oJqzpJjMqt2erQBRvn8lGvF4kehCblWGP+tsYCjnEFhSUOjDFCGGSIyujoO1Vm9K+xQ8Jee1Y9zed0WxTU/3OFAQL0z1xTurLSeTpPgT1fG1J1dCtuy56UNJFezUkSskJe1rZUQuoBNmVXjhF6XNGJPyhnSP8ACVpuyAAAAHicbcrBCoNADATQjLau3dWPjBTdaInINqD9+gb06MBc3gxVdCbSfSIq1HjgiQYBLV6ISJRKZp0OKXm1sBjLLNoM6+gYfqxf0SkVc73MZ39r6/2IQ7+bZmM95+7NutlFRH+UdSMxAAAA') format('woff'),    url('iconfont.ttf?t=1537976418058') format('truetype'), /* chrome, firefox, opera, Safari, Android, iOS 4.2+*/    url('iconfont.svg?t=1537976418058#iconfont') format('svg'); /* iOS 4.1- */  }    .icon-prev:before {    content:url('/img/page-first.png');  }    .icon-next:before {    content:url('/img/page-last.png');  }    .icon-play:before {     content:url('/img/play-circle-filled.png');  }    .icon-pause:before {    content:url('/img/pause-circle-filled.png');  }    .icon-random:before {    content:url('/img/suijibofang.png');  }    .icon-muted:before {    content:url('/img/shengyinjingyin.png');  }    .icon-volume:before {    content:url('/img/sound.png');  }    .icon-loop:before {    content:url('/img/xunhuan.png');  }    .icon-single:before {    content:url('/img/danquxunhuan.png');  }      /* 播放器位置 */  .music-player {    position: relative;    margin: 0px auto;  }    /* 歌曲列表 */  .music-player__list {    width: 100%;    padding: 10px;    margin-top: 30px;    background: rgba(0, 0, 0, 0.5);    border-radius: 5px;    -webkit-box-shadow: 0 2px 6px rgba(0, 0, 0, 0.5);    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.5);  }    .music__list__item {    padding-left: 25px;    color: #ccc;    position: relative;    margin-bottom: 10px;    font-size: 14px;    cursor: pointer;  }    .music__list__item:last-of-type {    margin: 0;  }    .music__list__item.play {    color: #fff;  }    .music__list__item.play:before {    font-family: 'iconfont';    content: "\e87a";    position: absolute;    left: 0px;    top: 4px;  }  /* 播放器主体 */  .music-player__main {    height: 180px;    padding: 25px;    box-shadow: 0 0 10px rgb(0 0 0 / 20%);    border-radius: 10px;    position: relative;    overflow: hidden;  }    /* 播放器主体模糊背景 */  .music-player__blur {    width: 100%;    height: 100%;    position: absolute;    background-size: 100%;    left: 0;    top: 0;    z-index: -1;    -webkit-filter: blur(20px);    filter: blur(20px);  }  /* 播放器唱片效果 */  .music-player__disc {    float: left;    width: 130px;    height: 130px;    background: url(/img/cd.png) no-repeat center;    background-size: 100%;    position: relative;  }    /* 唱片指针 */  .music-player__pointer {    width: 25px;    position: absolute;    right: -10px;    top: 0;    -webkit-transform-origin: right top;    -ms-transform-origin: right top;    transform-origin: right top;    -webkit-transform: rotate(-15deg);    -ms-transform: rotate(-15deg);    transform: rotate(-15deg);    -webkit-transition: all 0.3s;    -o-transition: all 0.3s;    transition: all 0.3s;  }    /* 唱片指针播放状态 加play类名 */  .music-player__pointer.play {    -webkit-transform: rotate(0deg);    -ms-transform: rotate(0deg);    transform: rotate(0deg);  }    /* 唱片歌曲图片 */  .music-player__image {    width: 80px;    height: 80px;    border-radius: 50%;    position: absolute;    overflow: hidden;    left: 0;    right: 0;    top: 0;    bottom: 0;    margin: auto;  }  /* 播放器控件 */  .music-player__controls {    width: 330px;    height: 130px;    float: right;  }    /* 歌曲信息 */  .music__info {    width: 100%;    height: 50px;    margin-bottom: 15px;  }    .music__info .music__info--title {    color: #fff;  }    .music__info .music__info--title {    font-size: 16px;  }  /* 控件 */    .player-control {    width: 100%;  }    .player-control__content {    overflow: hidden;  }    /* 播放暂停按钮 */  .player-control__btns {    float: left;    overflow: hidden;  }    .player-control__btn {    float: left;    margin: 0 5px;    font-weight: bolder;    color: #fff;    cursor: pointer;  }    .player-control__volume {    float: right;    overflow: hidden;  }    .control__volume--progress {    float: left;    width: 100px;    position: relative;    top: 8px;  }    .player__song--timeProgess{    font-size: 12px;    color: #fff;    padding: 0px 3px;    background: rgba(0, 0, 0, 0.3);    border-radius: 5px;  }    .player-control__content .nowTime{    float: left;  }  .player-control__content .totalTime{    float: right;  }    .music-player .progress {    background: rgba(0, 0, 0, 0.3);    height: 5px;    -webkit-box-shadow: 0 1px 2px rgba(0, 0, 0, 0.5) inset;    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.5) inset;    overflow: hidden;    margin: 0.5rem 0!important;    border-radius: 2px;    position: relative;    cursor: pointer;  }    .music-player .progress .back {    width: 0px;    height: 100%;    border-radius: 2px;    background: rgb(12, 182, 212);  }    .music-player .progress .pointer {    width: 7px;    height: 7px;    background: #fff;    border-radius: 50%;    opacity: 0;    -webkit-transition: opacity 0.3s;    -o-transition: opacity 0.3s;    transition: opacity 0.3s;    position: absolute;    top: -1px;    left: 0;  }    .music-player .progress:hover .pointer {    opacity: 1;  }      /* 播放 画片 动画 */    @-webkit-keyframes disc {    from {        -webkit-transform: rotate(0deg);        transform: rotate(0deg);    }      to {        -webkit-transform: rotate(360deg);        transform: rotate(360deg);    }  }    @keyframes disc {    from {        -webkit-transform: rotate(0deg);        transform: rotate(0deg);    }    to {        -webkit-transform: rotate(360deg);        transform: rotate(360deg);    }  }  .music-player__image.play {    -webkit-animation: disc 5s linear 0s infinite;    animation: disc 5s linear 0s infinite;  }  /*  播放进度  */  .player__song--progress {    width: 100%;    margin-top: 15px;  }  .music-player h1, .music-player h2, .music-player h3,.music-player h4, .music-player h5, .music-player h6, .music-player p {    margin: 0; padding: 0;  }  .music-player li { list-style: none; }]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/twikoo.css"/>
      <url>/css/twikoo.css</url>
      
        <content type="html"><![CDATA[:root {  --yimoorua-theme-op: #4259ef23;  --yimoorua-main-op-deep: var(--yimoorua-theme-op-deep) !important;  --yimoorua-theme-top: var(--yimoorua-theme);  --yimoorua-main: var(--yimoorua-theme);  --yimoorua-main-op: var(--yimoorua-theme-op);  --yimoorua-shadow-theme: 0 8px 12px -3px var(--yimoorua-theme-op);  --yimoorua-shadow-main: 0 8px 12px -3px var(--yimoorua-main-op);  --yimoorua-shadow-blue: 0 8px 12px -3px rgba(40, 109, 234, 0.2);  --yimoorua-shadow-white: 0 8px 12px -3px rgba(255, 255, 255, 0.2);  --yimoorua-shadow-black: 0 0 12px 4px rgba(0, 0, 0, 0.05);  --yimoorua-shadow-yellow: 0px 38px 77px -26px rgba(255, 201, 62, 0.12);  --yimoorua-shadow-red: 0 8px 12px -3px #ee7d7936;  --yimoorua-shadow-green: 0 8px 12px -3px #87ee7936;  --yimoorua-shadow-border: 0 8px 16px -4px #2c2d300c;  --yimoorua-shadow-blackdeep: 0 2px 16px -3px rgba(0, 0, 0, 0.15);  --yimoorua-logo-color: linear-gradient(215deg, #4584ff 30%, #ff7676 70%);  --style-border: 1px solid var(--yimoorua-card-border);  --yimoorua-blue-main: #3b70fc;  --style-border-hover: 1px solid var(--yimoorua-main);  --style-border-dashed: 1px dashed var(--yimoorua-theme-op);  --style-border-avatar: 4px solid var(--yimoorua-background);  --style-border-always: 1px solid var(--yimoorua-card-border);  --style-border-none: 1px solid transparent;  --yimoorua-main-none: #b8b8b800 !important;}[data-theme="light"] {  --yimoorua-theme-op-deep: #4259efdd;  --global-bg: #f7f9fe;  --yimoorua-theme: #3b70fc;  --yimoorua-theme-deep: #1856fb;  --yimoorua-theme-op: #4259ef23;  --yimoorua-blue: #5ca1ff;  --yimoorua-blue-tint: rgba(92, 161, 255, 0.1);  --yimoorua-red: #d8213c;  --yimoorua-pink: #ff7c7c;  --yimoorua-green: #57bd6a;  --yimoorua-fontcolor: #363636;  --yimoorua-background: #f7f9fe;  --yimoorua-reverse: #000;  --yimoorua-maskbg: rgba(255, 255, 255, 0.6);  --yimoorua-maskbgdeep: rgba(255, 255, 255, 0.85);  --yimoorua-hovertext: var(--yimoorua-theme);  --yimoorua-ahoverbg: #f7f7fa;  --yimoorua-lighttext: var(--yimoorua-main);  --yimoorua-secondtext: rgba(60, 60, 67, 0.6);  --yimoorua-scrollbar: rgba(60, 60, 67, 0.4);  --yimoorua-card-btn-bg: #edf0f7;  --yimoorua-post-blockquote-bg: #fafcff;  --yimoorua-post-tabs-bg: #f2f5f8;  --yimoorua-secondbg: #f1f3f8;  --yimoorua-shadow-nav: 0 5px 12px -5px rgba(102, 68, 68, 0.05);   /* 气泡框颜色 */  --yimoorua-card-bg: #ffffff;  --yimoorua-shadow-lightblack: 0 5px 12px -5px rgba(102, 68, 68, 0);  --yimoorua-shadow-light2black: 0 5px 12px -5px rgba(102, 68, 68, 0);  --yimoorua-card-border: #e3e8f7;}[data-theme="dark"] {  --yimoorua-blue: #5ca1ff;  --yimoorua-blue-tint: rgba(92, 161, 255, 0.1);  --yimoorua-theme-op-deep: #0084ffdd;  --global-bg: #18171d;  --yimoorua-theme: #0084ff;  --yimoorua-theme-deep: #0076e5;  --yimoorua-theme-op: #0084ff23;  --yimoorua-blue: #0084ff;  --yimoorua-red: #ff3842;  --yimoorua-pink: #ff7c7c;  --yimoorua-green: #57bd6a;  --yimoorua-fontcolor: #f7f7fa;  --yimoorua-background: #18171d;  --yimoorua-reverse: #fff;  --yimoorua-maskbg: rgba(0, 0, 0, 0.6);  --yimoorua-maskbgdeep: rgba(0, 0, 0, 0.85);  --yimoorua-hovertext: #0a84ff;  --yimoorua-ahoverbg: #7a3865;  --yimoorua-lighttext: #f2b94b;  --yimoorua-secondtext: #a1a2b8;  --yimoorua-scrollbar: rgba(200, 200, 223, 0.4);  --yimoorua-card-btn-bg: #30343f;  --yimoorua-post-blockquote-bg: #000;  --yimoorua-post-tabs-bg: #121212;  --yimoorua-secondbg: #30343f;  --yimoorua-shadow-nav: 0 5px 20px 0px rgba(28, 28, 28, 0.4);   /* 气泡框颜色 */  --yimoorua-card-bg: #191919e0;  --yimoorua-shadow-lightblack: 0 5px 12px -5px rgba(102, 68, 68, 0);  --yimoorua-shadow-light2black: 0 5px 12px -5px rgba(102, 68, 68, 0);  --yimoorua-card-border: #42444a;}.tk-expand {  width: 100%;  cursor: pointer;  padding: 0.75em;  text-align: center;  transition: all 0.5s;}#twikoo .tk-content p {  margin: 0;}#twikoo .tk-expand:hover {  color: var(--yimoorua-ahoverbg);  background-color: #efdce9;  border: var(--style-border-none);}.tk-expand {  border: var(--style-border);  box-shadow: 0 8px 16px -4px #2c2d300c;  border-radius: 50px;  letter-spacing: 5px;  background-color: var(--yimoorua-card-bg);}.tk-replies > .tk-comment {  border-top: var(--style-border-dashed);  border-radius: 12px;  padding: 1rem 0 0;  transition: all 0.3s ease 0s;}.tk-replies .tk-content span:first-child:not(.token) {  font-size: 0.5rem;  color: var(--yimoorua-secondtext);}#twikoo pre code {  padding: none;  background: 0 0;  color: none;}#twikoo code {  padding: 2px 4px;  background: var(--yimoorua-secondbg);  color: #f47466;}.el-input.el-input--small.el-input-group.el-input-group--prepend:nth-child(1):before {  content: "请输入你的昵称~";}.el-input.el-input--small.el-input-group.el-input-group--prepend:nth-child(2):before {  content: "请输入你的邮箱，会邮件通知你的~";}.el-input.el-input--small.el-input-group.el-input-group--prepend:nth-child(3):before {  content: "请输入你常用的网址，可以不填哦~";}.el-input.el-input--small.el-input-group.el-input-group--prepend:focus-within::after,.el-input.el-input--small.el-input-group.el-input-group--prepend:focus-within::before {  display: block;}.el-input.el-input--small.el-input-group.el-input-group--prepend::before {  display: none;  position: absolute;  top: -60px;  white-space: nowrap;  border-radius: 10px;  left: 50%;  transform: translate(-50%);  padding: 14px 18px;  background: #444;  color: #fff;}.el-input.el-input--small.el-input-group.el-input-group--prepend::after {  display: none;  content: "";  position: absolute;  border: 12px solid transparent;  border-top-color: #444;  left: 50%;  transform: translate(-50%, -48px);}.vwrap {  box-shadow: 2px 2px 5px #bbb;  background: rgba(255, 255, 255, 0.3);  border-radius: 8px;  padding: 30px;  margin: 30px 0 30px 0;}.vcard {  box-shadow: 2px 2px 5px #bbb;  background: rgba(255, 255, 255, 0.3);  border-radius: 8px;  padding: 30px;  margin: 30px 0 0 0;}#twikoo .tk-extra {  background: var(--yimoorua-card-bg);  border: var(--style-border-always);  padding: 4px 8px;  border-radius: 8px;  margin-right: 4px;  color: var(--yimoorua-secondtext);  margin-top: 6px;  font-size: 0.8rem;}#twikoo .tk-extra-text {  font-size: 0.5rem;}#twikoo .tk-replies .tk-content {  font-size: 0.9rem;}#twikoo .tk-content {  margin-top: 0;}.tk-content p a:not([data-fancybox="gallery"]) {  font-weight: 500;  border-bottom: solid 2px var(--yimoorua-lighttext);  color: var(--yimoorua-fontcolor);  padding: 0 0.2em;  text-decoration: none;}.tk-content p a:not([data-fancybox="gallery"]):hover {  color: var(--yimoorua-white);  background-color: #3b70fc;  border-radius: 4px;}#post-comment .comment-head {  font-size: 0.8em !important;  margin-bottom: 0.5rem;}.el-input.el-input--small.el-input-group.el-input-group--prepend:focus-within::before {  display: block;  animation: commonTipsIn 0.3s;}@keyframes commonTipsIn {  0% {    top: -50px;    opacity: 0;  }  100% {    top: -60px;    opacity: 1;  }}#twikoo .tk-input .el-textarea__inner {  min-height: 130px !important;  border-radius: 15px;  display: block;  resize: vertical;  padding: 16px 16px 40px 16px;  line-height: 1.5;  box-sizing: border-box;  width: 100%;  font-size: inherit;  color: #606266;  background-color: var(--yimoorua-card-bg);  border: var(--style-border-always);  transition: border-color 0.2s cubic-bezier(0.645, 0.045, 0.355, 1);}#page .el-textarea__inner {  background: var(--yimoorua-card-bg) !important;  box-shadow: 0 8px 16px -4px #2c2d300c;  color: var(--yimoorua-fontcolor) !important;}#twikoo.twikoo .el-input__inner:focus,#twikoo.twikoo .el-textarea__inner:focus {  border-color: var(--yimoorua-main);}.tk-comments-container > .tk-comment {  margin-top: 0 !important;  margin-bottom: 1rem !important;  transition: 0.3s;  border-radius: 12px;  padding: 0;  padding-top: 1rem;  border: none;  border-top: var(--style-border-dashed);}#post-comment .comment-tips {  background-color: rgba(103, 194, 58, 0.13);  border: var(--style-border-always);  border-color: var(--yimoorua-green);  color: var(--yimoorua-green);  border-radius: 8px;  padding: 8px 12px;  margin-top: 0.5rem;  display: none;}#post-comment .comment-tips.show {  display: flex;}#page .tk-comments-container > .tk-comment {  background: var(--yimoorua-card-bg);  padding: 1rem;  padding-bottom: 1rem;  border: var(--style-border);  border-top: var(--style-border);  box-shadow: var(--yimoorua-shadow-border);}.tk-content {  margin-top: 0.5rem;  overflow: auto;  max-height: 500px;}.page .el-input__inner {  background: var(--yimoorua-card-bg) !important;}.tk-comments .tk-row-actions-start {  position: relative;  top: -56px;  left: 17px;}.tk-comments .tk-main .tk-row-actions-start {  position: relative;  top: -56px;  left: 2px;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[:root {  /* 白天模式带透明度的背景色 */  --trans-light: rgba(235, 246, 247, 0.88);  /* 夜间模式带透明度的背景色 */  --trans-dark: rgba(25, 25, 25, 0.88);  /* 边框样式 */  --border-style: 0.1px solid var(--yimoorua-bordercolor);   /* 背景过滤器 */  --backdrop-filter: blur(5px) saturate(150%);}[data-theme="dark"]{  --yimoorua-bordercolor: #fffffc;  --yimoorua-bongumi: #a6e3ff;}[data-theme="light"] {  --yimoorua-bordercolor: #dcdddd;  --yimoorua-bongumi:#00b0ff;}/* 音乐播放器 *//* .aplayer .aplayer-lrc {  display: none !important;} */.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {    left: -66px !important;    transition: all 0.3s;    /* 默认情况下缩进左侧66px，只留一点箭头部分 */  }    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {    left: 0 !important;    transition: all 0.3s;    /* 鼠标悬停是左侧缩进归零，完全显示按钮 */  }    .aplayer.aplayer-fixed {    z-index: 999999 !important;  }  /* bilibli番剧插件 */#article-container .bangumi-tab.bangumi-active {    background: var(--yimoorua-bongumi);    color: white;    border-radius: 10px;  }  a.bangumi-tab:hover {    text-decoration: none !important;  }  .bangumi-button:hover {    background: var(--yimoorua-bongumi) !important;    border-radius: 10px !important;    color: white !important;  }  a.bangumi-button.bangumi-nextpage:hover {    text-decoration: none !important;  }  .bangumi-button {    padding: 5px 10px !important;  }    a.bangumi-tab {    padding: 5px 10px !important;  }  svg.icon.faa-tada {    font-size: 1.1em;  }  .bangumi-info-item {    border-right: 1px solid var(--yimoorua-bongumi);  }  .bangumi-info-item span {    color: var(--yimoorua-bongumi);  }  .bangumi-info-item em {    color: var(--yimoorua-bongumi);  }/* 页脚与头图透明 */#footer {  background: transparent !important;}#page-header {  background: transparent !important;}/* 白天模式遮罩透明 */#footer::before {  background: transparent !important;}#page-header::before {  background: transparent !important;}/* 夜间模式遮罩透明 */[data-theme="dark"] #footer::before {  background: transparent !important;}[data-theme="dark"] #page-header::before {  background: transparent !important;}@font-face {  /* 为载入的字体取名字(随意) */  /* font-family: 'YSHST'; */  font-family:HarmonyOS_Sans_SC_Medium;font-style: normal;font-display: swap;  /* 字体文件地址(相对或者绝对路径都可以) */   src: url('https://cdn.jsdelivr.net/gh/irozhi/HarmonyOS-Sans/HarmonyOS_Sans_SC/HarmonyOS_Sans_SC_Medium.woff2') format('woff2');  /* 定义加粗样式(加粗多少) */  font-weight: normal;  /* 定义字体样式(斜体/非斜体) */  font-style: normal;  /* 定义显示样式 */  font-display: block;}/* 翻页按钮居中 */#pagination {  width: 100%;  margin: auto;}/*哔哩哔哩视频适配*/.aspect-ratio {  position: relative;  width: 90%;  height: auto;  padding-bottom: 75%;  margin: 3% auto;  text-align: center;}.aspect-ratio iframe {  position: absolute;  width: 100%;  height: 86%;  left: 0;  top: 0;}/* 夜间模式菜单栏发光字 */[data-theme="dark"] #nav .site-page,[data-theme="dark"] #nav .menus_items .menus_item .menus_item_child li a {  text-shadow: 0 0 2px var(rgb(179, 71, 241)) !important;}/* 手机端适配 */[data-theme="dark"] #sidebar #sidebar-menus .menus_items .site-page {  text-shadow: 0 0 2px var(rgb(179, 71, 241)) !important;}/* 侧边栏个人信息卡片动态渐变色 */#aside-content > .card-widget.card-info {  background:   linear-gradient(    -45deg,    #e8d8b9,    #eccec5,    #a3e9eb,    #cf96bd,    #eec1ea  );  box-shadow: 0 0 5px rgb(66, 68, 68);  position: relative;  background-size: 400% 400%;  -webkit-animation: Gradient 10s ease infinite;  -moz-animation: Gradient 10s ease infinite;  animation: Gradient 10s ease infinite !important;}@-webkit-keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}@-moz-keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}@keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}/* 黑夜模式适配 */[data-theme="dark"] #aside-content > .card-widget.card-info {  background: #191919ee;}/* 个人信息Follow me按钮 */#aside-content > .card-widget.card-info > #card-info-btn {  background-color: #3eb8be;  border-radius: 8px;}/* 小冰分类分类磁铁黑夜模式适配 *//* 一般状态 */[data-theme="dark"] .magnet_link_context {  background: #000000;  color: rgb(255, 255, 255);}/* 鼠标悬浮状态 */[data-theme="dark"] .magnet_link_context:hover {  background: #3ecdf1;  color: #f2f2f2;}/* 全局默认鼠标指针 */body,html {  cursor: url("/cur/Arrow.cur"), auto !important;}/* 悬停图片时的鼠标指针 */img {  cursor: url("/cur/Hand.cur"), auto !important;}/* 选择链接标签时的鼠标指针 */a:hover {  cursor: url("/cur/Hand.cur"), auto;}/* 选中输入框时的鼠标指针 */input:hover {  cursor: url("/cur/Hand.cur"), auto;}/* 悬停按钮时的鼠标指针 */button:hover {  cursor: url("/cur/Hand.cur"), auto;}/* 悬停列表标签时的鼠标指针 */i:hover {  cursor: url("/cur/Hand.cur"), auto;}/* 悬停页脚链接标签（例如页脚徽标）时的鼠标指针 */#footer-wrap a:hover {  cursor: url("/cur/Hand.cur"), auto;}/* 悬停页码时的鼠标指针 */#pagination .page-number:hover {  cursor: url("/cur/Hand.cur"), auto;}/* 悬停菜单栏时的鼠标指针 */#nav .site-page:hover {  cursor: url("/cur/Hand.cur"), auto;}.loading-img {  background: url("/img/紫罗兰加载.png") no-repeat center center;  background-size: cover;}.iconfont{  font-family: 'iconfont' !important;  font-size: 4em;  /* 可以定义图标大小 */  font-style:normal;  -webkit-font-smoothing:antialiased;  -moz-osx-font-smoothing:grayscale;}/*时间轴生肖 icon */svg.icon{  /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突*/  width: 1em;  height: 1em;  /* width和height定义图标的默认宽度和高度*/  vertical-align: -0.15em;  fill: currentColor;  overflow: hidden;}.icon-zhongbiao::before{  color: #f7c768;}/* 首页文章卡片 */#recent-posts > .recent-post-item {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border-radius: 25px;  border: var(--border-style);}/* 首页侧栏卡片 */#aside-content .card-widget {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border-radius: 18px;  border: var(--border-style);}/* 文章页、归档页、普通页面 */div#post,div#page,div#category,div#archive {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border: var(--border-style);  border-radius: 20px;}/* 导航栏 */#page-header.nav-fixed #nav {  background: rgba(255, 255, 255, 0.75);  backdrop-filter: var(--backdrop-filter);}[data-theme="dark"] #page-header.nav-fixed #nav {  background: rgba(0, 0, 0, 0.7) !important;}/* 夜间模式遮罩 */[data-theme="dark"] #recent-posts > .recent-post-item,[data-theme="dark"] #aside-content .card-widget,[data-theme="dark"] div#post,[data-theme="dark"] div#archive,[data-theme="dark"] div#page,[data-theme="dark"] div#category{  background: var(--trans-dark);}/* 夜间模式页脚页头遮罩透明 */[data-theme="dark"] #footer::before {  background: transparent !important;}[data-theme="dark"] #page-header::before {  background: transparent !important;}/* 阅读模式 */.read-mode #aside-content .card-widget {  background: rgba(158, 204, 171, 0.5) !important;}.read-mode div#post {  background: rgba(158, 204, 171, 0.5) !important;}/* 夜间模式下的阅读模式 */[data-theme="dark"] .read-mode #aside-content .card-widget {  background: rgba(25, 25, 25, 0.9) !important;  color: #ffffff;}[data-theme="dark"] .read-mode div#post {  background: rgba(25, 25, 25, 0.9) !important;  color: #ffffff;}/* 一级菜单居中 */#nav .menus_items {  position: absolute !important;  width: fit-content !important;  left: 50% !important;  transform: translateX(-50%) !important;}/* 子菜单横向展示 */#nav .menus_items .menus_item:hover .menus_item_child {  display: flex !important;}/* 这里的2是代表导航栏的第2个元素，即有子菜单的元素，可以按自己需求修改 */.menus_items .menus_item:nth-child(2) .menus_item_child {  left: -125px;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/universe.css"/>
      <url>/css/universe.css</url>
      
        <content type="html"><![CDATA[/* 背景宇宙星光  */#universe{    display: block;    position: fixed;    margin: 0;    padding: 0;    border: 0;    outline: 0;    left: 0;    top: 0;    width: 100%;    height: 100%;    pointer-events: none;    /* 这个是调置顶的优先级的，-1在文章页下面，背景上面，个人推荐这种 */    z-index: -1;  }]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[<!-- 播放器 --><div class="music-player"><!-- audio标签 --><audio class="music-player__audio" ></audio><!-- 播放器主体 --><div class="music-player__main"><!-- 模糊背景 --><div class="music-player__blur"></div><!-- 唱片 --><div class="music-player__disc"><!-- 唱片图片 --><div class="music-player__image"><img width="100%" src="" alt=""></div><!-- 指针 --><div class="music-player__pointer"><img width="100%" src="/img/cd_tou.png" alt=""></div></div><!-- 控件主体 --><div class="music-player__controls"><!-- 歌曲信息 --><div class="music__info"><h3 class="music__info--title">...</h3></div><!-- 控件... --><div class="player-control"><div class="player-control__content"><div class="player-control__btns"><div class="player-control__btn player-control__btn--prev"><i class="iconfont icon-prev"></i></div><div class="player-control__btn player-control__btn--play"><i class="iconfont icon-play"></i></div><div class="player-control__btn player-control__btn--next"><i class="iconfont icon-next"></i></div><div class="player-control__btn player-control__btn--mode"><i class="iconfont icon-random"></i></div></div><div class="player-control__volume"><div class="control__volume--icon player-control__btn"><i class="iconfont icon-volume"></i></div><div class="control__volume--progress progress"></div></div></div><div class="player-control__content"><div class="player__song--progress progress"></div><div class="player__song--timeProgess nowTime">00:00</div><div class="player__song--timeProgess totalTime">00:00</div></div></div></div></div><!-- 歌曲列表 --><div class="music-player__list"><ul class="music__list_content"></ul></div></div><script src="/js/utill.js"></script><script src="https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.slim.min.js"></script><script src="/js/player.js?10"></script><div style="text-align:center;margin:-100px 0; font:normal 14px/24px 'MicroSoft YaHei';color:#ffffff"></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>视频</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[<p><b>Spring Cloud 学习</b></p><div align=center class="aspect-ratio">    <iframe src="//player.bilibili.com/player.html?aid=93813318&bvid=BV18E411x7eT&cid=256068987&page=1"     scrolling="no"     border="0"     frameborder="no"     framespacing="0"     high_quality=1    danmaku=1     allowfullscreen="true">     </iframe></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/light.js"/>
      <url>/js/light.js</url>
      
        <content type="html"><![CDATA[// 霓虹灯效果// 颜色数组var arr = ["#39c5bb", "#f14747", "#f1a247", "#f1ee47", "#b347f1", "#1edbff", "#ed709b", "#5636ed"];// 颜色索引var idx = 0;// 切换颜色function changeColor() {    // 仅夜间模式才启用    if (document.getElementsByTagName('html')[0].getAttribute('data-theme') == 'dark') {        if (document.getElementById("site-name"))            document.getElementById("site-name").style.textShadow = arr[idx] + " 0 0 15px";        if (document.getElementById("site-title"))            document.getElementById("site-title").style.textShadow = arr[idx] + " 0 0 15px";        if (document.getElementById("site-subtitle"))            document.getElementById("site-subtitle").style.textShadow = arr[idx] + " 0 0 10px";        if (document.getElementById("post-info"))            document.getElementById("post-info").style.textShadow = arr[idx] + " 0 0 5px";        try {            document.getElementsByClassName("author-info__name")[0].style.textShadow = arr[idx] + " 0 0 12px";            document.getElementsByClassName("author-info__description")[0].style.textShadow = arr[idx] + " 0 0 12px";        } catch {                    }        idx++;        if (idx == 8) {            idx = 0;        }    } else {        // 白天模式恢复默认        if (document.getElementById("site-name"))            document.getElementById("site-name").style.textShadow = "#1e1e1ee0 1px 1px 1px";        if (document.getElementById("site-title"))            document.getElementById("site-title").style.textShadow = "#1e1e1ee0 1px 1px 1px";        if (document.getElementById("site-subtitle"))            document.getElementById("site-subtitle").style.textShadow = "#1e1e1ee0 1px 1px 1px";        if (document.getElementById("post-info"))            document.getElementById("post-info").style.textShadow = "#1e1e1ee0 1px 1px 1px";        try {            document.getElementsByClassName("author-info__name")[0].style.textShadow = "";            document.getElementsByClassName("author-info__description")[0].style.textShadow = "";        } catch {                    }    }}// 开启计时器window.onload = setInterval(changeColor, 1200);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/title.js"/>
      <url>/js/title.js</url>
      
        <content type="html"><![CDATA[//动态标题var OriginTitile = document.title;var titleTime;document.addEventListener("visibilitychange", function () {  if (document.hidden) {    //离开当前页面时标签显示内容    document.title = "w(ﾟДﾟ)w 不要走！再看看嘛！";    clearTimeout(titleTime);  } else {    //返回当前页面时标签显示内容    document.title = "♪(^∇^*)欢迎肥来！" + OriginTitile;    //两秒后变回正常标题    titleTime = setTimeout(function () {      document.title = OriginTitile;    }, 2000);  }});]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/rightmenu.js"/>
      <url>/js/rightmenu.js</url>
      
        <content type="html"><![CDATA[console.log(    "Codes uses GPL Licence")function insertAtCursor(myField, myValue) {    //IE 浏览器    if (document.selection) {        myField.focus();        sel = document.selection.createRange();        sel.text = myValue;        sel.select();    }    //FireFox、Chrome等    else if (myField.selectionStart || myField.selectionStart == '0') {        var startPos = myField.selectionStart;        var endPos = myField.selectionEnd;        // 保存滚动条        var restoreTop = myField.scrollTop;        myField.value = myField.value.substring(0, startPos) + myValue + myField.value.substring(endPos, myField.value.length);        if (restoreTop > 0) {            myField.scrollTop = restoreTop;        }        myField.focus();        myField.selectionStart = startPos + myValue.length;        myField.selectionEnd = startPos + myValue.length;    } else {        myField.value += myValue;        myField.focus();    }}let rmf = {};rmf.showRightMenu = function (isTrue, x = 0, y = 0) {    let $rightMenu = $('#rightMenu');    $rightMenu.css('top', x + 'px').css('left', y + 'px');    if (isTrue) {        $rightMenu.show();    } else {        $rightMenu.hide();    }}rmf.switchDarkMode = function () {    const nowMode = document.documentElement.getAttribute('data-theme') === 'dark' ? 'dark' : 'light'    if (nowMode === 'light') {        activateDarkMode()        saveToLocal.set('theme', 'dark', 2)        GLOBAL_CONFIG.Snackbar !== undefined && btf.snackbarShow(GLOBAL_CONFIG.Snackbar.day_to_night)    } else {        activateLightMode()        saveToLocal.set('theme', 'light', 2)        GLOBAL_CONFIG.Snackbar !== undefined && btf.snackbarShow(GLOBAL_CONFIG.Snackbar.night_to_day)    }    // handle some cases    typeof utterancesTheme === 'function' && utterancesTheme()    typeof FB === 'object' && window.loadFBComment()    window.DISQUS && document.getElementById('disqus_thread').children.length && setTimeout(() => window.disqusReset(), 200)};rmf.copyWordsLink = function () {    let url = window.location.href    let txa = document.createElement("textarea");    txa.value = url;    document.body.appendChild(txa)    txa.select();    document.execCommand("Copy");    document.body.removeChild(txa);    Swal.fire("复制成功！");}rmf.switchReadMode = function () {    const $body = document.body    $body.classList.add('read-mode')    const newEle = document.createElement('button')    newEle.type = 'button'    newEle.className = 'fas fa-sign-out-alt exit-readmode'    $body.appendChild(newEle)    function clickFn() {        $body.classList.remove('read-mode')        newEle.remove()        newEle.removeEventListener('click', clickFn)    }    newEle.addEventListener('click', clickFn)}//复制选中文字rmf.copySelect = function () {    document.execCommand('Copy', false, null);    //这里可以写点东西提示一下 已复制}//回到顶部rmf.scrollToTop = function () {    btf.scrollToDest(0, 500);}rmf.translate = function () {    document.getElementById("translateLink").click();}// 右键菜单事件document.onkeydown = function (event) {    event = (event || window.event);    if (event.keyCode == 17) {        console.log("你知道的太多了");        return;    }}function popupMenu() {    //window.oncontextmenu=function(){return false;}    window.oncontextmenu = function (event) {        if(event.ctrlKey)return true;        console.log(event.keyCode)        $('.rightMenu-group.hide').hide();        //如果有文字选中，则显示 文字选中相关的菜单项        if (document.getSelection().toString()) {            $('#menu-text').show();        }        if (document.getElementById('post')) {            $('#menu-post').show();        } else {            if (document.getElementById('page')) {                $('#menu-post').show();            }        }        var el = window.document.body;        el = event.target;        var a=/^(?:http(s)?:\/\/)?[\w.-]+(?:\.[\w\.-]+)+[\w\-\._~:/?#[\]@!\$&'\*\+,;=.]+$/        if (a.test(window.getSelection().toString())){            $('#menu-too').show()        }        if (el.tagName == 'A') {            $('#menu-to').show()            rmf.open = function () {                location.href = el.href            }            rmf.openWithNewTab = function () {                window.open(el.href);            }            rmf.copyLink = function () {                let url = el.href                let txa = document.createElement("textarea");                txa.value = url;                document.body.appendChild(txa)                txa.select();                document.execCommand("Copy");                document.body.removeChild(txa);            }        }        if (el.tagName == 'IMG') {            $('#menu-img').show()            rmf.openWithNewTab = function () {                window.open(el.src);            }            rmf.click = function () {                el.click()            }            rmf.copyLink = function () {                let url = el.src                let txa = document.createElement("textarea");                txa.value = url;                document.body.appendChild(txa)                txa.select();                document.execCommand("Copy");                document.body.removeChild(txa);            }        } else if (el.tagName == "TEXTAREA" || el.tagName == "INPUT") {            $('#menu-paste').show();            rmf.paste = function () {                navigator.permissions                    .query({                        name: 'clipboard-read'                    })                    .then(result => {                        if (result.state == 'granted' || result.state == 'prompt') {                            //读取剪贴板                            navigator.clipboard.readText().then(text => {                                console.log(text)                                insertAtCursor(el, text)                            })                        } else {                            alert('请允许读取剪贴板！')                        }                    })            }        }        let pageX = event.clientX + 10;        let pageY = event.clientY;        let rmWidth = $('#rightMenu').width();        let rmHeight = $('#rightMenu').height();        if (pageX + rmWidth > window.innerWidth) {            pageX -= rmWidth + 10;        }        if (pageY + rmHeight > window.innerHeight) {            pageY -= pageY + rmHeight - window.innerHeight;        }        rmf.showRightMenu(true, pageY, pageX);        return false;    };    window.addEventListener('click', function () {        rmf.showRightMenu(false);    });}if (!(navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i))) {    popupMenu()}const box = document.documentElementfunction addLongtabListener(target, callback) {    let timer = 0 // 初始化timer    target.ontouchstart = () => {        timer = 0 // 重置timer        timer = setTimeout(() => {            callback();            timer = 0        }, 380) // 超时器能成功执行，说明是长按    }    target.ontouchmove = () => {        clearTimeout(timer) // 如果来到这里，说明是滑动        timer = 0    }    target.ontouchend = () => { // 到这里如果timer有值，说明此触摸时间不足380ms，是点击        if (timer) {            clearTimeout(timer)        }    }}addLongtabListener(box, popupMenu)]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/universe.js"/>
      <url>/js/universe.js</url>
      
        <content type="html"><![CDATA[function dark() {window.requestAnimationFrame=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame;var n,e,i,h,t=.05,s=document.getElementById("universe"),o=!0,a="180,184,240",r="226,225,142",d="226,225,224",c=[];function f(){n=window.innerWidth,e=window.innerHeight,i=.216*n,s.setAttribute("width",n),s.setAttribute("height",e)}function u(){h.clearRect(0,0,n,e);for(var t=c.length,i=0;i<t;i++){var s=c[i];s.move(),s.fadeIn(),s.fadeOut(),s.draw()}}function y(){this.reset=function(){this.giant=m(3),this.comet=!this.giant&&!o&&m(10),this.x=l(0,n-10),this.y=l(0,e),this.r=l(1.1,2.6),this.dx=l(t,6*t)+(this.comet+1-1)*t*l(50,120)+2*t,this.dy=-l(t,6*t)-(this.comet+1-1)*t*l(50,120),this.fadingOut=null,this.fadingIn=!0,this.opacity=0,this.opacityTresh=l(.2,1-.4*(this.comet+1-1)),this.do=l(5e-4,.002)+.001*(this.comet+1-1)},this.fadeIn=function(){this.fadingIn&&(this.fadingIn=!(this.opacity>this.opacityTresh),this.opacity+=this.do)},this.fadeOut=function(){this.fadingOut&&(this.fadingOut=!(this.opacity<0),this.opacity-=this.do/2,(this.x>n||this.y<0)&&(this.fadingOut=!1,this.reset()))},this.draw=function(){if(h.beginPath(),this.giant)h.fillStyle="rgba("+a+","+this.opacity+")",h.arc(this.x,this.y,2,0,2*Math.PI,!1);else if(this.comet){h.fillStyle="rgba("+d+","+this.opacity+")",h.arc(this.x,this.y,1.5,0,2*Math.PI,!1);for(var t=0;t<30;t++)h.fillStyle="rgba("+d+","+(this.opacity-this.opacity/20*t)+")",h.rect(this.x-this.dx/4*t,this.y-this.dy/4*t-2,2,2),h.fill()}else h.fillStyle="rgba("+r+","+this.opacity+")",h.rect(this.x,this.y,this.r,this.r);h.closePath(),h.fill()},this.move=function(){this.x+=this.dx,this.y+=this.dy,!1===this.fadingOut&&this.reset(),(this.x>n-n/4||this.y<0)&&(this.fadingOut=!0)},setTimeout(function(){o=!1},50)}function m(t){return Math.floor(1e3*Math.random())+1<10*t}function l(t,i){return Math.random()*(i-t)+t}f(),window.addEventListener("resize",f,!1),function(){h=s.getContext("2d");for(var t=0;t<i;t++)c[t]=new y,c[t].reset();u()}(),function t(){document.getElementsByTagName('html')[0].getAttribute('data-theme')=='dark'&&u(),window.requestAnimationFrame(t)}()};dark()]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/player.js"/>
      <url>/js/player.js</url>
      
        <content type="html"><![CDATA[//创建一个音乐播放器的类 单例模式class Player {    constructor() { //类的构造函数        //如果没有实例化，就去构造一个实例        return this.getInstance(...arguments);    }    //构建实例    getInstance() {        let instance = new PlayerCreator(...arguments);        //让实例可以使用到Player的原型的属性方法        // instance.__proto__=Player.prototype;        // instance.constructor=Player;        //把构建好的实例挂在Player类上        Player.instance = instance;        return instance;    }}//歌曲信息class Musics {    //歌曲    constructor() {        this.songs = [{                id: 1,                title: '平凡的一天 (Live)',                singer: '毛不易',                songUrl: './songs/1.mp3',                imageUrl: './images/1.webp'            },            {                id: 2,                title: '紫罗兰花园主题曲',                singer: '紫罗兰',                songUrl: './songs/2.mp3',                imageUrl: './images/2.png'            },        ]    }    //根据索引获取歌曲的方法    getSongByNum(index) {        return this.songs[index];    }}//真正的构建播放器的类class PlayerCreator {    constructor() {        this.audio = document.querySelector('.music-player__audio') // Audio dom元素, 因为很多api都是需要原生audio调用的，所以不用jq获取        // this.audio.muted = true; // 控制静音        this.audio.volume = 0.2;        //工具        this.util = new Util();        this.musics = new Musics(); //歌曲信息        this.song_index = 0; // 当前播放的歌曲索引        this.loop_mode = 1; // 1 2        // 下方歌曲列表容器        this.song_list = $('.music__list_content');        this.render_doms = { //切换歌曲时需要渲染的dom组            title: $('.music__info--title'),            singer: $('.music__info--singer'),            image: $('.music-player__image img'),            blur: $('.music-player__blur')        }        this.ban_dom = { //禁音时需要渲染的dom组            control__btn: $('.control__volume--icon')        }        // 时间显示容器        this.render_time = {            now: $('.nowTime'),            total: $('.totalTime')        }        // 唱片        this.disc = {            image: $('.music-player__image'),            pointer: $('.music-player__pointer')        };        //播放器初始化        this.init();    }    //初始化函数    init() {        this.renderSongList();        this.renderSongStyle();        this.bindEventListener();    }    //生成播放列表    renderSongList() {        let _str = '';        this.musics.songs.forEach((song, i) => {            _str += `<li class="music__list__item">${song.title}</li>`        });        this.song_list.html(_str);    }    //根据歌曲去渲染视图    renderSongStyle() {        let {            title,            singer,            songUrl,            imageUrl        } = this.musics.getSongByNum(this.song_index);        this.audio.src = songUrl;        this.render_doms.title.html(title);        this.render_doms.singer.html(singer);        this.render_doms.image.prop('src', imageUrl);        this.render_doms.blur.css('background-image', 'url("' + imageUrl + '")');        //切换列表中的item的类名 play        this.song_list.find('.music__list__item').eq(this.song_index).addClass('play').siblings().removeClass('play');    }    //绑定各种事件    bindEventListener() {        //播放按钮        this.$play = new Btns('.player-control__btn--play', {            click: this.handlePlayAndPause.bind(this)        });        //上一首        this.$prev = new Btns('.player-control__btn--prev', {            click: this.changeSong.bind(this, 'prev')        });        //下一首        this.$next = new Btns('.player-control__btn--next', {            click: this.changeSong.bind(this, 'next')        });        //循环模式        this.$mode = new Btns('.player-control__btn--mode', {            click: this.changePlayMode.bind(this)        });        //禁音        this.$ban = new Btns('.control__volume--icon', {            click: this.banNotes.bind(this)        })        //列表点击        this.song_list.on('click', 'li', (e) => {            let index = $(e.target).index();            this.changeSong(index);        })        //音量控制 audio标签音量 vlouem 属性控制0-1        new Progress('.control__volume--progress', {            min: 0,            max: 1,            value: this.audio.volume,            handler: (value) => { //更改进度时                this.audio.volume = value;            }        })        //歌曲进度 this.audio.duration        //可以播放的时候触发（歌曲的基本信息都已经获取到了）        this.audio.oncanplay = () => {            //避免重复实例化            if (this.progress) {                this.progress.max = this.audio.duration; //切换歌曲后更新时长                this.render_time.total.html(this.util.formatTime(this.audio.duration));                return false;            };            this.progress = new Progress('.player__song--progress', {                min: 0,                max: this.audio.duration,                value: 0,                handler: (value) => {                    this.audio.currentTime = value;                }            })            //调整总时长            this.render_time.total.html(this.util.formatTime(this.audio.duration));        }        //会在播放的时候持续触发        this.audio.ontimeupdate = () => {            this.progress.setValue(this.audio.currentTime);            //调整当前时长            this.render_time.now.html(this.util.formatTime(this.audio.currentTime));        }        //当歌曲播放完成的时候        this.audio.onended = () => {            this.changeSong('next');            //播放完，换歌后，重新播放            this.audio.play();        }    }    //播放暂停控制    handlePlayAndPause() {        let _o_i = this.$play.$el.find('i');        //this.audio.pauseed值为true 说明目前是不播放        if (this.audio.paused) { //现在是暂停的 要播放            this.audio.play();            _o_i.removeClass('icon-play').addClass('icon-pause');            this.disc.image.addClass('play');            this.disc.pointer.addClass('play')        } else {            this.audio.pause();            _o_i.addClass('icon-play').removeClass('icon-pause');            this.disc.image.removeClass('play');            this.disc.pointer.removeClass('play');        }    }    //更改循环模式    changePlayMode() {        this.loop_mode++;        if (this.loop_mode > 2) this.loop_mode = 0;        this.renderPlayMode();    }    //更改按钮样式    renderPlayMode() {        let _classess = ['loop', 'random', 'single'];        let _o_i = this.$mode.$el.find('i');        //prop 改一些标签的自有属性 attr改一些标签的自定义属性        _o_i.prop('class', 'iconfont icon-' + _classess[this.loop_mode])    }    //更改歌曲索引    changeSongIndex(type) {        if (typeof type === 'number') {            this.song_index = type;        } else {            if (this.loop_mode === 0) {                //列表循环                this.song_index += type === 'next' ? 1 : -1;                if (this.song_index > this.musics.songs.length - 1) this.song_index = 0;                if (this.song_index < 0) this.song_index = this.musics.songs.length - 1;            } else if (this.loop_mode === 1) {                //随机播放                let _length = this.musics.songs.length;                let _random = Math.floor(Math.random() * _length);                for (let i = 0; i < 10000; i++) { //随机的数为本身则继续随机                    if (this.song_index == _random) {                        _random = Math.floor(Math.random() * _length);                    } else {                        this.song_index = _random;                        break;                    }                }            } else if (this.loop_mode === 2) {                this.song_index = this.song_index;            }        }    }    //歌曲时长    songTime() {        let totalMinute = parseInt(this.audio.duration / 60) < 10 ? "0" + parseInt(this.audio.duration / 60) : parseInt(this.audio.duration / 60);        let totalSecond = parseInt(this.audio.duration % 60) < 10 ? "0" + parseInt(this.audio.duration % 60) : parseInt(this.audio.duration % 60);        $('.totalTime').text(totalMinute + ':' + totalSecond);    }    //切换歌曲    changeSong(type) {        //更改索引        this.changeSongIndex(type);        //记录切歌前的状态        let _is_pause = this.audio.paused;        //切歌后更改视图显示        this.renderSongStyle();        //如果切歌前是在播放，就继续播放        if (!_is_pause) this.audio.play();    }    //禁音    banNotes() {        let _o_i = this.$ban.$el.find("i");        if (this.audio.muted == true) { //如果禁音则开启            this.audio.muted = false;            _o_i.removeClass('icon-muted').addClass('icon-volume');        } else {            this.audio.muted = true;            _o_i.removeClass('icon-volume').addClass('icon-muted');        }    }}//进度条class Progress {    constructor(selector, options) {        $.extend(this, options);        ///给this挂载传入的参数        this.$el = $(selector);        this.width = this.$el.width();        this.init();    }    //进度条初始化    init() {        this.renderBackAndPointer();        this.bindEvents();        this.drag();        this.value;        this.changeDOMStyle(this.width * this.value);    }    //为进度条渲染back和pointer    renderBackAndPointer() {        this.$back = $('<div class="back">');        this.$pointer = $('<div class="pointer">');        this.$el.append(this.$back);        this.$el.append(this.$pointer);    }    setValue(value) { //主动调用，传入value值，设置进度条样式        let _distance = this.width * value / (this.max - this.min);        this.changeDOMStyle(_distance);    }    drag() {        let ele = this.$pointer;        let father = this.$el;        let flag = false; //鼠标是否点击        ele.mousedown((e) => {            flag = true;            let mousePos = {                x: e.offsetX            }            $(document).mousemove((e) => {                if (flag === true) {                    let _left = e.clientX - father.offset().left - mousePos.x;                    let _distance = Math.max(0, Math.min(_left, father.outerWidth(false) - ele.outerWidth(false)))                    let _ratio = _distance / father.outerWidth(false);                    let _value = _ratio * (this.max - this.min); //当前的音量值                    this.changeDOMStyle(_distance);                    this.handler(_value); //更改进度之后，执行回调                }            })        })        $(document).mouseup(() => {            flag = false;        })    }    bindEvents() { //鼠标点击时更改        this.$el.click((e) => {            let _x = e.offsetX; //鼠标距离元素左边的距离            let _ratio = _x / this.width;            let _value = _ratio * (this.max - this.min); //当前的音量值            this.changeDOMStyle(_x);            this.handler(_value); //更改进度之后，执行回调        })    }    //更改pointer和back    changeDOMStyle(distance) {        this.$back.width(distance + 7 == 7 ? 0 : distance + 7);//进度为0时将进度条背景改为0否则加上进度按钮的长度        this.$pointer.css('left', distance + 'px');    }}//按钮类 class Btns {    constructor(selector, handlers) {        this.$el = $(selector); //元素        this.bindEvents(handlers);    }    bindEvents(handlers) { //绑定事件        for (const event in handlers) {            //使用值的时候保证键值对在对象中是存在的            if (handlers.hasOwnProperty(event)) {                this.$el.on(event, handlers[event]);            }        }    }}new Player();document.addEventListener('pjax:complete', (e) => {    new Player();})]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/utill.js"/>
      <url>/js/utill.js</url>
      
        <content type="html"><![CDATA[class Util {    constructor() {        if (Util.instance) return Util.instance;        return this.getInstance(...arguments);    }    getInstance() {        var instance = {            /*             *   formatTime 格式化时间（s）为 hour:minutes:seconds             *   @params  time  required number (s)             *                *   return hour:minutes:seconds string             */            formatTime(time) {                //没有传time的时候                if (time === undefined) {                    this.handlerError(123, {                        method: 'formate',                        param: 'time'                    });                    return false;                }                let _time = Math.floor(time);                let _minutes = Math.floor(_time / 60);                let _hours = Math.floor(_minutes / 60);                let _seconds = _time - (_minutes * 60);                return (_hours ? this.fillZero(_hours) + ':' : '') + this.fillZero(_minutes - (_hours * 60)) + ':' + this.fillZero(_seconds);            },            /*             *   fillZero 为小于10的数字补0             *   @params  num  required number             *   return '01'.. string             */            fillZero(num) {                //当没有传time的时候                if (num === undefined) {                    this.handlerError(123, {                        method: 'fillZero',                        param: 'num'                    });                    return false;                }                //这个函数只是让我们在渲染/显示的时候有一个不同的效果，不要操作原数据                return num > 9 ? num : '0' + num;            },            errors: {                123: ({                    method,                    param                }) => {                    return method + 'function need a param ' + param;                }            },            handlerError(code, options) { //处理报错                console.error('[until error] message' + this.errors[code](options));            }        }        Util.instance = instance;        return instance;    }}//为了这个工具以后在模块化环境中依然可以使用，需要判断一下，如果是在模块化环境，就将其暴露出去//commonJsif (typeof module === 'object' && typeof module.exports === 'object') {    module.exports = Util;}//AMDif (typeof define === 'function' && define.amd) {    define('util', [], function () {        return Util;    });}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime.js"/>
      <url>/js/runtime.js</url>
      
        <content type="html"><![CDATA[var now = new Date();function createtime() {  now.setTime(now.getTime() + 1e3);  var e = new Date("11/15/2022 00:00:00"),    t = Math.trunc(234e8 + ((now - e) / 1e3) * 17),    a = (t / 1496e5).toFixed(6),    n = new Date("11/15/2022 00:00:00"),    s = (now - n) / 1e3 / 60 / 60 / 24,    o = Math.floor(s),    r = (now - n) / 1e3 / 60 / 60 - 24 * o,    i = Math.floor(r);  1 == String(i).length && (i = "0" + i);  var l = (now - n) / 1e3 / 60 - 1440 * o - 60 * i,    b = Math.floor(l);  1 == String(b).length && (b = "0" + b);  var d = (now - n) / 1e3 - 86400 * o - 3600 * i - 60 * b,    c = Math.round(d);  1 == String(c).length && (c = "0" + c);  let g = "";  (g =    i < 18 && i >= 9      ? `<img class='boardsign' src='https://img.shields.io/badge/F小屋-上班摸鱼中-6adea8?style=social&logo=cakephp' title='距离月入10K还要加油啊~'><span class='textTip'> <br> <b>本站居然运行了 ${o} 天</span><span id='runtime'> ${i} 小时 ${b} 分 ${c} 秒 </b></span> <i id="heartbeat" class='fas fa-heartbeat' style='color:red'></i> <br> <b>旅行者 1 号当前距离地球 ${t} 千米，约为 ${a} 个天文单位 🚀</b>`      : `<img class='boardsign' src='https://img.shields.io/badge/F小屋-打烊休息啦-6adea8?style=social&logo=coffeescript' title='不要熬夜哦，早睡早起身体好~'><span class='textTip'> <br> <b>本站居然运行了 ${o} 天</span><span id='runtime'> ${i} 小时 ${b} 分 ${c} 秒 </b></span> <i id="heartbeat" class='fas fa-heartbeat' style='color:red'></i> <br> <b>旅行者 1 号当前距离地球 ${t} 千米，约为 ${a} 个天文单位 🚀</b> `),    document.getElementById("workboard") &&      (document.getElementById("workboard").innerHTML = g);}setInterval(() => {  createtime();}, 1e3);]]></content>
      
    </entry>
    
    
  
</search>
